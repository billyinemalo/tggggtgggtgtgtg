import os
import sys
import json
import uuid
import secrets
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from urllib.parse import urlparse, urlunparse, parse_qsl, urlencode
import random

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ---------- –õ–û–ì–ò –ò –í–ï–†–°–ò–ò ----------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–£–¢–ò ----------
(
    ASK_USERNAME,
    ASK_SUBS,
    ASK_PLATFORMS,
    ASK_THEME,
    ASK_STATS,
    WAITING_ORDER_PHOTO,
    WAITING_BARCODE_PHOTO,
    WAITING_PAYMENT_TEXT,
    WAITING_LINKS,
    WAITING_DECLINE_REASON,
    ADMIN_WAITING_STATUS_USER,
    ADMIN_WAITING_RECEIPT,
    ADMIN_WAITING_BROADCAST_TEXT,
    ADMIN_WAITING_SEGCAST_TEXT,
    ADMIN_WAITING_DRAFT_TEXT,
) = range(15)

DATA_DIR = "data"
MEDIA_DIR = "media"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
DECLINES_FILE = os.path.join(DATA_DIR, "declines.json")
PAYMENTS_EXPORT_XLSX = os.path.join(DATA_DIR, "payments_export.xlsx")
ADMIN_ID = "1080067724"  # –≤–∞—à Telegram ID (—Å—Ç—Ä–æ–∫–æ–π)
MODERATOR_IDS: List[str] = []      # –¥–æ–±–∞–≤—å—Ç–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –ü–ª–æ—â–∞–¥–∫–∏
PLATFORMS = ["Wildberries", "Ozon"]

# --- —Å–µ–≥–º–µ–Ω—Ç—ã ---
SEG_FILLED = "filled_form"
SEG_GOT_TZ = "got_tz"
SEG_DONE = "links_received"
SEG_REQ_PAY = "requested_pay"
SEG_REVIEW = "review"
SEG_PAID = "paid"
SEG_NOT_PAID = "not_paid"

# --- callback prefixes ---
SEGCAST_PREFIX = "segcast:"        # –≤—ã–±—Ä–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
SEGCONFIRM_PREFIX = "segconfirm:"  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ yes/no
BROADCAST_PREVIEW_CB_YES = "broadcast:yes"
BROADCAST_PREVIEW_CB_NO = "broadcast:no"
SEGEXPORT_PREFIX = "segexport:"    # —ç–∫—Å–ø–æ—Ä—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ excel
PAY_DONE_PREFIX = "pay_done:"
PAY_SUPPORT_PREFIX = "pay_support:"

# ---------- –†–û–õ–ò ----------
def is_admin(uid: str) -> bool:
    return uid == ADMIN_ID

def is_mod(uid: str) -> bool:
    return uid in MODERATOR_IDS or is_admin(uid)

# ---------- –ú–ï–ù–Æ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞) ----------
def build_user_menu(uid: str) -> ReplyKeyboardMarkup:
    data = ensure_data_schema()
    filled = uid in data.get("bloggers", {})
    has_order = uid in data.get("orders", {})
    status = data.get("orders", {}).get(uid, {}).get("status")

    rows: List[List[KeyboardButton]] = []

    # –ö–Ω–æ–ø–∫–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    if not filled:
        rows.append([KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")])
    rows.append([KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")])
    if has_order and status == "links_received":
        rows.append([KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")])
    else:
        rows.append([KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")])

    rows.append([KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")])
    rows.append([KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])

    # –ê–¥–º–∏–Ω-–º–µ–Ω—é
    if is_mod(uid):
        rows.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def menu_admin() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"), KeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")],
        [KeyboardButton("üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"), KeyboardButton("üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"), KeyboardButton("üóÇ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ], resize_keyboard=True)

# ---------- –ü–û–î–ì–û–¢–û–í–ö–ê –•–†–ê–ù–ò–õ–ò–©–ê ----------
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

DEFAULT_DATA: Dict[str, Any] = {
    "bloggers": {},     # user_id -> –ø—Ä–æ—Ñ–∏–ª—å
    "orders": {},       # user_id -> {platform, order_date, deadline, status, links, tz_assigned_at, reminder_sent, links_flagged}
    "payments": {},     # payment_id -> {...}
    "drafts": [],       # [{text, ts}]
    "referrals": {},    # ref_id -> [user_ids...]
}

def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        save_data(DEFAULT_DATA.copy())
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_data_schema() -> Dict[str, Any]:
    try:
        data = load_data()
    except Exception:
        data = {}
    changed = False
    for k, default_val in DEFAULT_DATA.items():
        if k not in data or not isinstance(data[k], type(default_val)):
            data[k] = default_val if not isinstance(default_val, dict) else {}
            changed = True
    if changed:
        save_data(data)
    return data

def append_decline(user_id: str, reason: str):
    items: List[Dict[str, Any]] = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                items = json.load(f)
                if not isinstance(items, list):
                    items = []
        except Exception:
            items = []
    items.append({"user_id": user_id, "reason": reason, "timestamp": datetime.now().isoformat()})
    with open(DECLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def user_filled_form(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["bloggers"]

def user_has_order(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["orders"]

def order_status(user_id: str) -> Optional[str]:
    data = ensure_data_schema()
    return data["orders"].get(user_id, {}).get("status")

def set_order_links_received(user_id: str, links: List[str]):
    data = ensure_data_schema()
    o = data["orders"].setdefault(user_id, {
        "platform": None, "order_date": None, "deadline": None, "status": "assigned", "links": []
    })
    o["links"] = (o.get("links") or []) + links
    o["status"] = "links_received"
    save_data(data)

def reset_user_flow(context: ContextTypes.DEFAULT_TYPE, user_id: str):
    context.user_data.clear()

def short_payment_id() -> str:
    # –∫–æ—Ä–æ—Ç–∫–∏–π ID —Ç–∏–ø–∞ PAYA1B2C3
    return "PAY" + secrets.token_hex(3).upper()

# --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ---
TRACK_PARAMS = {
    "utm_source","utm_medium","utm_campaign","utm_term","utm_content",
    "fbclid","gclid","yclid","_openstat","utm_referrer","ref"
}

def normalize_url(u: str) -> str:
    try:
        u = u.strip()
        if not u:
            return ""
        p = urlparse(u)
        scheme = "https" if p.scheme in ("http", "https") else p.scheme or "https"
        netloc = (p.netloc or "").lower()
        q = [(k, v) for k, v in parse_qsl(p.query, keep_blank_values=True) if k not in TRACK_PARAMS]
        new_q = urlencode(q, doseq=True)
        path = p.path if p.path != "/" else ""
        return urlunparse((scheme, netloc, path.rstrip("/"), p.params, new_q, ""))
    except Exception:
        return u.strip()

def collect_all_normalized_links(data: dict) -> set[str]:
    s = set()
    for o in data.get("orders", {}).values():
        for l in o.get("links", []) or []:
            n = normalize_url(l)
            if n:
                s.add(n)
    return s

def user_normalized_links(data: dict, user_id: str) -> set[str]:
    s = set()
    o = data.get("orders", {}).get(user_id, {})
    for l in o.get("links", []) or []:
        n = normalize_url(l)
        if n:
            s.add(n)
    return s

# ---- –ê–≤—Ç–æ-—ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ –µ–¥–∏–Ω—ã–π Excel ----
def export_payments_excel():
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    payments = data.get("payments", {})

    rows = []
    for pid, p in payments.items():
        uid = p.get("user_id", "")
        user = bloggers.get(uid, {})
        uname = user.get("username", "")
        pay_text = p.get("text", "")
        links = p.get("links", []) or []
        first_link = links[0] if links else ""
        rows.append({
            "–ù–∏–∫–Ω–µ–π–º": uname,
            "–¢–ì –∞–π–¥–∏": uid,
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã": pay_text,
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫": first_link,
            "–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã": p.get("status", "")
        })

    df = pd.DataFrame(rows, columns=["–ù–∏–∫–Ω–µ–π–º", "–¢–ì –∞–π–¥–∏", "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫", "–°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã"])
    df.to_excel(PAYMENTS_EXPORT_XLSX, index=False)

# ---- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ ----
async def save_photo_locally(bot, file_id: str, path: str):
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        tg_file = await bot.get_file(file_id)
        await tg_file.download_to_drive(path)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª {path}", exc_info=e)

# ---------- HEALTHCHECK ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
        def log_message(self, *_): pass
    port = int(os.environ.get("PORT", "10000"))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- –•–ï–ù–î–õ–ï–†–´: /start –∏ –∑–∞–ø—É—Å–∫ ----------
WELCOME_VARIANTS = [
    "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É.",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º.",
    "–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å! –ü—Ä–∏—Å—Ç—É–ø–∏–º?",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    # —Ä–µ—Ñ–µ—Ä–∞–ª: /start ref_123
    if context.args:
        arg = context.args[0]
        if arg.startswith("ref_"):
            ref_by = arg[4:]
            data = ensure_data_schema()
            if uid not in data["bloggers"]:
                data["bloggers"][uid] = {}
            if not data["bloggers"][uid].get("ref_by"):
                data["bloggers"][uid]["ref_by"] = ref_by
                refs = data.get("referrals", {})
                lst = set(refs.get(ref_by, []))
                lst.add(uid)
                refs[ref_by] = sorted(list(lst))
                data["referrals"] = refs
                save_data(data)

    hello = random.choice(WELCOME_VARIANTS)
    text = (
        f"{hello}\n\n"
        "1) –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n"
        "2) –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.\n"
        "3) –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî ¬´–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
        "4) –ó–∞—Ç–µ–º ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É¬ª."
    )
    await update.message.reply_text(text, reply_markup=build_user_menu(uid))

async def launch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_user_flow(context, str(update.effective_user.id))
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º. –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=build_user_menu(str(update.effective_user.id)))

# ----- –ê–Ω–∫–µ—Ç–∞ -----
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if user_filled_form(uid):
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¢–ó.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–∏–∫ –∏–ª–∏ –∫–∞–Ω–∞–ª:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –í–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = update.message.text
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –í—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = update.message.text
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ö–≤–∞—Ç–æ–≤ –∑–∞ 7‚Äì14 –¥–Ω–µ–π.")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ö–≤–∞—Ç–æ–≤.")
        return ASK_STATS

    photo = update.message.photo[-1]
    context.user_data["reach_screenshot"] = photo.file_id

    data = ensure_data_schema()
    blogger = data["bloggers"].get(uid, {})
    blogger.update(dict(context.user_data))
    if not blogger.get("username"):
        blogger["username"] = update.effective_user.username or ""
    blogger["ts"] = datetime.now().isoformat()
    data["bloggers"][uid] = blogger
    save_data(data)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.",
        reply_markup=build_user_menu(uid)
    )
    return ConversationHandler.END

# ----- –¢–ó -----
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    data = ensure_data_schema()
    orders = data["orders"]

    if uid in orders:
        await update.message.reply_text(
            "–¢–ó —É–∂–µ –≤—ã–¥–∞–Ω–æ. –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.",
            reply_markup=build_user_menu(uid)
        )
        return ConversationHandler.END

    counts = {p: sum(1 for x in orders.values() if x.get("platform") == p) for p in PLATFORMS}
    platform = min(counts, key=counts.get) if counts else PLATFORMS[0]

    today = datetime.now().date()
    order_date = (today + timedelta(days=1)).strftime("%Y-%m-%d")
    deadline = (today + timedelta(days=4)).strftime("%Y-%m-%d")

    orders[uid] = {
        "platform": platform,
        "order_date": order_date,
        "deadline": deadline,
        "status": "assigned",
        "links": [],
        "tz_assigned_at": datetime.now().isoformat(),
        "reminder_sent": False,
        "links_flagged": False,
    }
    save_data(data)

    text = (
        f"*–ü–ª–æ—â–∞–¥–∫–∞:* {platform}\n"
        f"*–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:* {order_date}\n"
        f"*–î–µ–¥–ª–∞–π–Ω –≤—ã–∫—É–ø–∞:* –¥–æ {deadline}\n\n"
        f"**–¢–ó:**\n"
        f"1) –ó–∞–∫–∞–∂–∏—Ç–µ –∏ –≤—ã–∫—É–ø–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É ¬´–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞¬ª.\n"
        f"2) –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ {platform}.\n"
        f"3) –°–Ω–∏–º–∏—Ç–µ Reels‚Äë–æ–±–∑–æ—Ä —Å –æ–∑–≤—É—á–∫–æ–π: –ø–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –∏–≥—Ä—É.\n"
        f"4) –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        f"5) –í–æ–∑–≤—Ä–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
        f"6) –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–ª–∞—Ç—ã.\n\n"
        f"–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏."
    )
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=build_user_menu(uid))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫–∏
async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö).")
    return WAITING_LINKS

async def save_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ URL(—ã).")
        return WAITING_LINKS

    raw_parts = [p.strip() for p in text.replace("\n", " ").split(",") if p.strip()]
    if not raw_parts and (text.startswith("http://") or text.startswith("https://")):
        raw_parts = [text.strip()]

    candidates = [p for p in raw_parts if p.startswith(("http://", "https://"))]
    if not candidates:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")
        return WAITING_LINKS

    data = ensure_data_schema()
    user_seen_norm = user_normalized_links(data, uid)
    global_seen_norm = collect_all_normalized_links(data)

    norm_map = {c: normalize_url(c) for c in candidates if normalize_url(c)}
    self_dups = [orig for orig, norm in norm_map.items() if norm in user_seen_norm]
    global_dups = [orig for orig, norm in norm_map.items()
                   if norm in global_seen_norm and norm not in user_seen_norm]

    new_links = [orig for orig, norm in norm_map.items() if norm not in user_seen_norm]

    # –µ—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ ‚Äî —Å–∏–≥–Ω–∞–ª –∞–¥–º–∏–Ω—É –∏ —Ñ–ª–∞–≥ –≤ –∑–∞–∫–∞–∑–µ
    if global_dups:
        bloggers = data.get("bloggers", {})
        uname = bloggers.get(uid, {}).get("username", "")
        try:
            await context.application.bot.send_message(
                ADMIN_ID,
                "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏ —Å—Å—ã–ª–æ–∫ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uname} (id:{uid})\n" +
                "\n".join(f"‚Ä¢ {u}" for u in global_dups[:10])
            )
        except Exception:
            pass
        # –ø–æ–º–µ—Ç–∏–º –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –±—É–¥—É—â–∞—è –æ–ø–ª–∞—Ç–∞ —É—à–ª–∞ "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
        o = data["orders"].setdefault(uid, {})
        o["links_flagged"] = True
        data["orders"][uid] = o
        save_data(data)

    if not new_links:
        msg = "–≠—Ç–∏ —Å—Å—ã–ª–∫–∏ —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞–Ω–µ–µ:\n" + "\n".join(f"‚Ä¢ {u}" for u in self_dups) \
              if self_dups else "–í—Å–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ."
        if global_dups:
            msg += "\n\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —É –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + \
                   "\n".join(f"‚Ä¢ {u}" for u in global_dups[:10])
        await update.message.reply_text(msg)
        return WAITING_LINKS

    set_order_links_received(uid, new_links)

    feedback = ["–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã."]
    if self_dups:
        feedback.append("\n–ò—Å–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –¥—É–±–ª–∏ (—É –í–∞—Å):")
        feedback += [f"‚Ä¢ {u}" for u in self_dups]
    if global_dups:
        feedback.append("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:")
        feedback += [f"‚Ä¢ {u}" for u in global_dups[:10]]

    feedback.append("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É.")
    await update.message.reply_text("\n".join(feedback), reply_markup=build_user_menu(uid))
    return ConversationHandler.END

# –û—Ç–∫–∞–∑ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
async def decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¢–ó.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.")
    return WAITING_DECLINE_REASON

async def save_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    reason = (update.message.text or "").strip() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    append_decline(uid, reason)
    data = ensure_data_schema()
    if uid in data["orders"]:
        data["orders"][uid]["status"] = "declined"
        save_data(data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –º—ã —É—á—Ç—ë–º. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.", reply_markup=build_user_menu(uid))
    return ConversationHandler.END

# ¬´–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)¬ª
async def reconsider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# ----- –û–ø–ª–∞—Ç–∞ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -----
def user_has_any_payment(uid: str) -> Optional[str]:
    """–í–µ—Ä–Ω—ë—Ç payment_id, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ (pending/review/paid)."""
    data = ensure_data_schema()
    for pid, p in data.get("payments", {}).items():
        if p.get("user_id") == uid and p.get("status") in {"pending", "review", "paid"}:
            return pid
    return None

async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END
    if order_status(uid) != "links_received":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (¬´–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª).", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    # –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞—è–≤–∫–∏
    existing = user_has_any_payment(uid)
    if existing:
        await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (‚Ññ {existing}). –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    await update.message.reply_text("1) –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞/–æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ.")
    return WAITING_ORDER_PHOTO

async def save_order_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞/–æ—Ç–∑—ã–≤–∞.")
        return WAITING_ORDER_PHOTO
    photo = update.message.photo[-1]
    context.user_data["order_photo"] = photo.file_id
    uid = str(update.effective_user.id)
    await save_photo_locally(context.application.bot, photo.file_id, os.path.join(MEDIA_DIR, uid, "order.jpg"))
    await update.message.reply_text("2) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.")
        return WAITING_BARCODE_PHOTO
    photo = update.message.photo[-1]
    context.user_data["barcode_photo"] = photo.file_id
    uid = str(update.effective_user.id)
    await save_photo_locally(context.application.bot, photo.file_id, os.path.join(MEDIA_DIR, uid, "barcode.jpg"))

    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∫–µ: –¥–ª—è Ozon –∑–∞–ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞; –¥–ª—è WB ‚Äî —á–µ–∫ —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç (—à—Ç—Ä–∏—Ö–∫–æ–¥ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω).
    data = ensure_data_schema()
    platform = data.get("orders", {}).get(uid, {}).get("platform")
    if platform == "Ozon":
        await update.message.reply_text("3) –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ Ozon –∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–§–ò–û, –Ω–æ–º–µ—Ä).")
    else:
        await update.message.reply_text("3) –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (–§–ò–û, –Ω–æ–º–µ—Ä).")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    pay_text = (update.message.text or "").strip()

    data = ensure_data_schema()
    orders = data.get("orders", {})
    payments = data["payments"]
    order = orders.get(uid, {})
    links = order.get("links", [])
    flagged = bool(order.get("links_flagged"))

    # –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
    existed = user_has_any_payment(uid)
    if existed:
        await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (‚Ññ {existed}). –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", reply_markup=build_user_menu(uid))
        return ConversationHandler.END

    payment_id = short_payment_id()
    status = "review" if flagged else "pending"

    payments[payment_id] = {
        "user_id": uid,
        "order_photo": context.user_data.get("order_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "text": pay_text,
        "links": links,
        "timestamp": datetime.now().isoformat(),
        "status": status,
        "admin_msg_id": None,
        "support_messages": [],
    }
    save_data(data)

    # –∞–≤—Ç–æ-—ç–∫—Å–ø–æ—Ä—Ç
    try:
        export_payments_excel()
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å payments_export.xlsx", exc_info=e)

    user_note = "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏." if status == "review" else "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ."
    await update.message.reply_text(f"‚úÖ ‚Ññ {payment_id}. {user_note}", reply_markup=build_user_menu(uid))

    # ---- –ê–¥–º–∏–Ω—É: –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–∫–∞–º–∏ ----
    app = context.application
    media = []
    if context.user_data.get("order_photo"):
        media.append(InputMediaPhoto(media=context.user_data["order_photo"], caption=f"–ó–∞—è–≤–∫–∞ #{payment_id}"))
    if context.user_data.get("barcode_photo"):
        media.append(InputMediaPhoto(media=context.user_data["barcode_photo"]))
    if media:
        try:
            await app.bot.send_media_group(ADMIN_ID, media=media)
        except Exception as e:
            logging.exception("send_media_group failed", exc_info=e)

    bloggers = data.get("bloggers", {})
    uname = bloggers.get(uid, {}).get("username", "")
    links_text = "\n".join(f"- {u}" for u in links) if links else "‚Äî"
    admin_text = (
        f"üí∞ –ó–∞—è–≤–∫–∞ #{payment_id}\n"
        f"üë§ {uname} (id:{uid})\n"
        f"üîó –°—Å—ã–ª–∫–∏:\n{links_text}\n\n"
        f"üí≥ –î–∞–Ω–Ω—ã–µ:\n{pay_text}\n\n"
        f"–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ: –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ #{payment_id}", callback_data=f"{PAY_DONE_PREFIX}{payment_id}")],
        [InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É #{payment_id}", callback_data=f"{PAY_SUPPORT_PREFIX}{payment_id}")],
    ])
    try:
        msg = await app.bot.send_message(ADMIN_ID, admin_text, reply_markup=kb)
        data = ensure_data_schema()
        data["payments"][payment_id]["admin_msg_id"] = msg.message_id
        save_data(data)
    except Exception as e:
        logging.exception("send admin text failed", exc_info=e)

    return ConversationHandler.END

# ----- –ê–¥–º–∏–Ω: ¬´–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞¬ª -----
async def on_admin_pay_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    q = update.callback_query
    await q.answer()
    try:
        payment_id = q.data.split(":", 1)[1]
    except Exception:
        await q.edit_message_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return

    context.bot_data.setdefault("await_receipt_by_admin", {})
    context.bot_data["await_receipt_by_admin"][str(update.effective_user.id)] = payment_id

    try:
        await q.edit_message_reply_markup(
            InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚è≥ –ñ–¥—É —á–µ–∫ –ø–æ #{payment_id}", callback_data=f"{PAY_DONE_PREFIX}{payment_id}")],
                [InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É #{payment_id}", callback_data=f"{PAY_SUPPORT_PREFIX}{payment_id}")],
            ])
        )
    except Exception:
        pass

    await q.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{payment_id}.")

# --- –ê–¥–º–∏–Ω: ¬´–ù–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É¬ª (support) ----
async def on_admin_support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    q = update.callback_query
    await q.answer()
    try:
        payment_id = q.data.split(":", 1)[1]
    except Exception:
        await q.edit_message_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return

    context.bot_data.setdefault("await_support_text", {})
    context.bot_data["await_support_text"][str(update.effective_user.id)] = payment_id

    await q.message.reply_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∑–∞—è–≤–∫–µ #{payment_id}. –û–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ ¬´–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª.")

async def admin_handle_support_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –¥–ª—è –±–ª–æ–≥–µ—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ù–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É ‚Ä¶¬ª"""
    if not is_admin(str(update.effective_user.id)):
        return

    wait_map = context.bot_data.get("await_support_text", {})
    payment_id = wait_map.get(str(update.effective_user.id))
    if not payment_id:
        return

    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_admin()); return

    data = ensure_data_schema()
    p = data.get("payments", {}).get(payment_id)
    if not p:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu_admin()); return

    uid = p.get("user_id")
    try:
        await context.application.bot.send_message(uid, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{text}")
    except Exception:
        pass

    # –ª–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞—è–≤–∫–µ
    msgs = p.get("support_messages", [])
    msgs.append({"text": text, "ts": datetime.now().isoformat()})
    p["support_messages"] = msgs
    save_data(data)

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    try:
        del context.bot_data["await_support_text"][str(update.effective_user.id)]
    except Exception:
        pass

    await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=menu_admin())

# --- –ê–¥–º–∏–Ω: –ø—Ä–∏—ë–º —á–µ–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def admin_wait_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(str(update.effective_user.id)):
        return ConversationHandler.END

    wait_map = context.bot_data.get("await_receipt_by_admin", {})
    payment_id = wait_map.get(str(update.effective_user.id))

    if not payment_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ ‚Ä¶¬ª, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.", reply_markup=menu_admin())
        return ConversationHandler.END

    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return ADMIN_WAITING_RECEIPT

    photo = update.message.photo[-1]
    photo_id = photo.file_id

    data = ensure_data_schema()
    pay = data["payments"].get(payment_id)
    if not pay:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu_admin())
        return ConversationHandler.END

    uid = pay["user_id"]
    await save_photo_locally(context.application.bot, photo_id, os.path.join(MEDIA_DIR, str(uid), f"receipt_{payment_id}.jpg"))

    app = context.application
    try:
        await app.bot.send_message(uid, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ {payment_id}. –°–ø–∞—Å–∏–±–æ!")
        await app.bot.send_photo(uid, photo_id, caption="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", exc_info=e)

    pay["status"] = "paid"
    order = data["orders"].get(uid, {})
    # –µ—Å–ª–∏ –±—ã–ª review ‚Äî —Å—á–∏—Ç–∞–µ–º –∑–∞–∫—Ä—ã—Ç
    order["status"] = "completed"
    data["orders"][uid] = order
    save_data(data)

    try:
        export_payments_excel()
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å payments_export.xlsx –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã", exc_info=e)

    admin_msg_id = pay.get("admin_msg_id")
    if admin_msg_id:
        try:
            await app.bot.edit_message_reply_markup(chat_id=ADMIN_ID, message_id=admin_msg_id, reply_markup=None)
            await app.bot.edit_message_text(
                chat_id=ADMIN_ID, message_id=admin_msg_id,
                text=f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ\n\n–ó–∞—è–≤–∫–∞ ‚Ññ {payment_id} –∑–∞–∫—Ä—ã—Ç–∞."
            )
        except Exception:
            pass

    try:
        del context.bot_data["await_receipt_by_admin"][str(update.effective_user.id)]
    except Exception:
        pass

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –∏ –ø–æ–ª—É—á–∏–ª —á–µ–∫.", reply_markup=menu_admin())
    return ConversationHandler.END

# ----- –°–µ–≥–º–µ–Ω—Ç—ã / —Å–≤–æ–¥–∫–∞ / –ø–æ–∏—Å–∫ / —ç–∫—Å–ø–æ—Ä—Ç (–∞–¥–º–∏–Ω) -----
def format_user_status(user_id: str, data: Dict[str, Any]) -> str:
    u = data["bloggers"].get(user_id, {})
    o = data["orders"].get(user_id, {})
    status = o.get("status", "‚Äî")
    links = o.get("links", [])
    uname = u.get("username") or "‚Äî"
    subs = u.get("subs") or "‚Äî"
    platform = o.get("platform") or "‚Äî"
    order_date = o.get("order_date") or "‚Äî"
    deadline = o.get("deadline") or "‚Äî"
    ref_by = u.get("ref_by") or "‚Äî"
    lines = [
        f"üë§ user_id: {user_id}",
        f"‚Ä¢ –ù–∏–∫: {uname}",
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subs}",
        f"‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}",
        f"‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order_date}",
        f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω: {deadline}",
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä: {ref_by}",
    ]
    if links:
        lines.append("‚Ä¢ –°—Å—ã–ª–∫–∏:")
        for i, l in enumerate(links, 1):
            lines.append(f"   {i}. {l}")
    return "\n".join(lines)

def compute_segments() -> Dict[str, List[str]]:
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    filled = set(bloggers.keys())
    got_tz = set(orders.keys())
    done = {uid for uid, o in orders.items() if o.get("status") == "links_received"}
    req_pay = {p.get("user_id") for p in payments.values() if p.get("status") in {"pending", "review"}}
    paid = {p.get("user_id") for p in payments.values() if p.get("status") == "paid"}
    not_paid = req_pay - paid

    return {
        SEG_FILLED: sorted(filled),
        SEG_GOT_TZ: sorted(got_tz),
        SEG_DONE: sorted(done),
        SEG_REQ_PAY: sorted(req_pay),
        SEG_REVIEW: sorted({p.get("user_id") for p in payments.values() if p.get("status") == "review"}),
        SEG_PAID: sorted(paid),
        SEG_NOT_PAID: sorted(not_paid),
    }

def segment_human_name(seg: str) -> str:
    return {
        SEG_FILLED: "–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É",
        SEG_GOT_TZ: "–ü–æ–ª—É—á–∏–ª–∏ –¢–ó",
        SEG_DONE: "–ü—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫–∏",
        SEG_REQ_PAY: "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ –æ–ø–ª–∞—Ç—É",
        SEG_REVIEW: "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        SEG_PAID: "–û–ø–ª–∞—á–µ–Ω–æ",
        SEG_NOT_PAID: "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
    }.get(seg, seg)

def format_segment_list(title: str, uids: List[str], bloggers: Dict[str, Any], max_lines: int = 200) -> str:
    lines = [f"‚Äî {title}: {len(uids)}"]
    cnt = 0
    for uid in uids:
        uname = bloggers.get(uid, {}).get("username", "‚Äî")
        lines.append(f"  ‚Ä¢ {uname} (id: {uid})")
        cnt += 1
        if cnt >= max_lines:
            lines.append(f"  ...–∏ –µ—â—ë {len(uids)-cnt}")
            break
    return "\n".join(lines)

async def admin_status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.")
    return ADMIN_WAITING_STATUS_USER

async def admin_status_wait_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    uid = (update.message.text or "").strip()
    data = ensure_data_schema()
    if uid not in data["bloggers"] and uid not in data["orders"]:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu_admin()); return ConversationHandler.END
    await update.message.reply_text(format_user_status(uid, data), reply_markup=menu_admin())
    return ConversationHandler.END

async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    q = " ".join(context.args) if context.args else ""
    if not q:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <—á–∞—Å—Ç—å –Ω–∏–∫–∞>", reply_markup=menu_admin()); return
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    matches = []
    for uid, b in bloggers.items():
        name = (b.get("username") or "").lower()
        if q.lower() in name:
            matches.append(uid)
    if not matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu_admin()); return
    resp = "\n\n".join(format_user_status(uid, data) for uid in matches[:20])
    await update.message.reply_text(resp, reply_markup=menu_admin())

async def cmd_findid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /findid <user_id>", reply_markup=menu_admin()); return
    uid = context.args[0].strip()
    data = ensure_data_schema()
    if uid not in data["bloggers"] and uid not in data["orders"]:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu_admin()); return
    await update.message.reply_text(format_user_status(uid, data), reply_markup=menu_admin())

async def admin_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    segments = compute_segments()

    blocks = []
    for seg_key in [SEG_FILLED, SEG_GOT_TZ, SEG_DONE, SEG_REQ_PAY, SEG_REVIEW, SEG_PAID, SEG_NOT_PAID]:
        title = segment_human_name(seg_key)
        uids = segments.get(seg_key, [])
        blocks.append(format_segment_list(title, uids, bloggers, max_lines=200))

    text = "üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:\n\n" + "\n\n".join(blocks)

    kb_rows = []
    for seg_key in [SEG_FILLED, SEG_GOT_TZ, SEG_DONE, SEG_REQ_PAY, SEG_REVIEW, SEG_PAID, SEG_NOT_PAID]:
        kb_rows.append([
            InlineKeyboardButton(f"üì£ –†–∞—Å—Å—ã–ª–∫–∞: {segment_human_name(seg_key)}", callback_data=f"{SEGCAST_PREFIX}{seg_key}")
        ])
        kb_rows.append([
            InlineKeyboardButton(f"üßæ –≠–∫—Å–ø–æ—Ä—Ç: {segment_human_name(seg_key)}", callback_data=f"{SEGEXPORT_PREFIX}{seg_key}")
        ])

    kb = InlineKeyboardMarkup(kb_rows)
    await update.message.reply_text(text, reply_markup=kb)

# ‚Äî‚Äî —Å–µ–≥–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ / —ç–∫—Å–ø–æ—Ä—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ, –æ–ø—É—â–µ–Ω–æ —Ä–∞–¥–∏ –º–µ—Å—Ç–∞) ‚Äî‚Äî
# (–Ω–∏–∂–µ ‚Äî —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏: on_segcast_choose, admin_segment_broadcast_text,
#  on_segment_broadcast_confirm, export_segment_to_excel, on_segexport, admin_broadcast_ask_text,
#  admin_broadcast_text, on_broadcast_confirm, admin_save_draft_ask, admin_save_draft_text, admin_list_drafts,
#  admin_referrals, admin_unpaid, cmd_stats)
# ====== START: –ø–æ–≤—Ç–æ—Ä –≤—Å—Ç–∞–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ======

async def on_segcast_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    seg_key = q.data.split(":", 1)[1]
    context.user_data["segcast_target"] = seg_key
    name = segment_human_name(seg_key)
    await q.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç: ¬´{name}¬ª.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.")
    return ADMIN_WAITING_SEGCAST_TEXT

async def admin_segment_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    seg_key = context.user_data.get("segcast_target")
    if not seg_key:
        await update.message.reply_text("–°–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤¬ª.", reply_markup=menu_admin()); return ConversationHandler.END
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_admin()); return ConversationHandler.END

    segments = compute_segments()
    target_ids = segments.get(seg_key, [])
    context.user_data["segcast_text"] = text
    context.user_data["segcast_ids"] = target_ids

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(f"‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(target_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data=f"{SEGCONFIRM_PREFIX}yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{SEGCONFIRM_PREFIX}no"),
    ]])
    preview = f"üì£ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è ¬´{segment_human_name(seg_key)}¬ª ({len(target_ids)}):\n\n{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    await update.message.reply_text(preview, reply_markup=kb)
    return ConversationHandler.END

async def on_segment_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    decision = q.data.split(":", 1)[1]
    if decision == "no":
        await q.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    text = context.user_data.get("segcast_text", "")
    target_ids: List[str] = context.user_data.get("segcast_ids", [])
    ok, fail = 0, 0
    failed_ids: List[str] = []
    app = context.application
    for uid in target_ids:
        try:
            await app.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
            failed_ids.append(uid)

    report = f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {ok}\n–û—à–∏–±–æ–∫: {fail}"
    if failed_ids:
        report += "\n\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(failed_ids[:100])
        if len(failed_ids) > 100:
            report += f"\n...–∏ –µ—â—ë {len(failed_ids)-100}"
    try:
        await q.edit_message_text(report)
    except Exception:
        await app.bot.send_message(ADMIN_ID, report)

def export_segment_to_excel(seg_key: str) -> str:
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    segments = compute_segments()
    uids = segments.get(seg_key, [])

    rows = []
    for uid in uids:
        o = data["orders"].get(uid, {})
        b = bloggers.get(uid, {})
        rows.append({
            "user_id": uid,
            "–ù–∏–∫–Ω–µ–π–º": b.get("username", ""),
            "–°—Ç–∞—Ç—É—Å": o.get("status", ""),
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": o.get("platform", ""),
            "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": o.get("order_date", ""),
            "–î–µ–¥–ª–∞–π–Ω": o.get("deadline", ""),
            "–°—Å—ã–ª–∫–∞": (o.get("links") or [""])[0]
        })
    df = pd.DataFrame(rows)
    path = os.path.join(DATA_DIR, f"export_seg_{seg_key}.xlsx")
    df.to_excel(path, index=False)
    return path

async def on_segexport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    seg_key = q.data.split(":", 1)[1]
    p = export_segment_to_excel(seg_key)
    await q.message.reply_document(open(p, "rb"), filename=os.path.basename(p), caption=f"–≠–∫—Å–ø–æ—Ä—Ç: {segment_human_name(seg_key)}")

async def admin_broadcast_ask_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
    return ADMIN_WAITING_BROADCAST_TEXT

async def admin_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ü—É—Å—Ç–æ. –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_admin()); return ConversationHandler.END

    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    n = len(bloggers)
    context.user_data["broadcast_text"] = text

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f"‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {n}", callback_data=BROADCAST_PREVIEW_CB_YES),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=BROADCAST_PREVIEW_CB_NO),
        ]
    ])
    preview = f"üì£ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º {n} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    await update.message.reply_text(preview, reply_markup=kb)
    return ConversationHandler.END

async def on_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()

    if q.data == BROADCAST_PREVIEW_CB_NO:
        await q.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        return

    text = context.user_data.get("broadcast_text", "")
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    user_ids = list(bloggers.keys())

    ok, fail = 0, 0
    failed_ids: List[str] = []
    app = context.application
    for uid in user_ids:
        try:
            await app.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
            failed_ids.append(uid)

    report = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {ok}\n–û—à–∏–±–æ–∫: {fail}"
    if failed_ids:
        report += "\n\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(failed_ids[:100])
        if len(failed_ids) > 100:
            report += f"\n...–∏ –µ—â—ë {len(failed_ids)-100}"
    try:
        await q.edit_message_text(report, reply_markup=None)
    except Exception:
        await app.bot.send_message(ADMIN_ID, report)

async def admin_save_draft_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
    return ADMIN_WAITING_DRAFT_TEXT

async def admin_save_draft_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return ConversationHandler.END
    t = (update.message.text or "").strip()
    if not t:
        await update.message.reply_text("–ü—É—Å—Ç–æ. –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_admin()); return ConversationHandler.END
    data = ensure_data_schema()
    drafts = data.get("drafts", [])
    drafts.insert(0, {"text": t, "ts": datetime.now().isoformat()})
    data["drafts"] = drafts[:50]
    save_data(data)
    await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=menu_admin()); return ConversationHandler.END

async def admin_list_drafts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    data = ensure_data_schema()
    drafts = data.get("drafts", [])[:5]
    if not drafts:
        await update.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ—Ç.", reply_markup=menu_admin()); return
    lines = ["üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏:"]
    for i, d in enumerate(drafts, 1):
        preview = d["text"][:120].replace("\n", " ")
        lines.append(f"{i}) {preview} ‚Ä¶  ({d['ts']})")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_admin())

async def admin_referrals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    data = ensure_data_schema()
    refs = data.get("referrals", {})
    if not refs:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", reply_markup=menu_admin()); return
    items = sorted(refs.items(), key=lambda kv: len(kv[1]), reverse=True)[:20]
    lines = ["üë• –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:"]
    for ref_id, lst in items:
        lines.append(f"‚Ä¢ {ref_id}: {len(lst)} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_admin())

async def admin_unpaid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    data = ensure_data_schema()
    payments = data.get("payments", {})
    bloggers = data.get("bloggers", {})
    pending = [(pid, p) for pid, p in payments.items() if p.get("status") in {"pending", "review"}]
    if not pending:
        await update.message.reply_text("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=menu_admin()); return
    lines = ["üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:"]
    for pid, p in pending[:50]:
        uid = p.get("user_id", "")
        uname = bloggers.get(uid, {}).get("username", "")
        st = p.get("status")
        lines.append(f"‚Ä¢ ‚Ññ {pid} ‚Äî {uname} (id:{uid}) [{st}]")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_admin())

def try_parse_date(s: str) -> Optional[datetime]:
    for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
        try:
            return datetime.strptime(s, fmt)
        except Exception:
            pass
    return None

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /stats 01.08.2025-11.08.2025", reply_markup=menu_admin()); return
    rng = "".join(context.args)
    if "-" not in rng:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.", reply_markup=menu_admin()); return
    a, b = rng.split("-", 1)
    dt1, dt2 = try_parse_date(a.strip()), try_parse_date(b.strip())
    if not dt1 or not dt2:
        await update.message.reply_text("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –¥–∞—Ç—ã.", reply_markup=menu_admin()); return
    if dt2 < dt1:
        dt1, dt2 = dt2, dt1

    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    def in_range(ts: str) -> bool:
        try:
            dt = datetime.fromisoformat(ts)
            return dt1 <= dt <= dt2
        except Exception:
            return False

    filled = sum(1 for u in bloggers.values() if in_range(u.get("ts", datetime.now().isoformat())))
    got_tz = sum(1 for o in orders.values() if in_range(o.get("tz_assigned_at", datetime.now().isoformat())))
    done = sum(1 for o in orders.values() if o.get("status") == "links_received" and in_range(o.get("tz_assigned_at", datetime.now().isoformat())))
    req_pay = sum(1 for p in payments.values() if p.get("status") in {"pending", "review"} and in_range(p.get("timestamp", datetime.now().isoformat())))
    paid = sum(1 for p in payments.values() if p.get("status") == "paid" and in_range(p.get("timestamp", datetime.now().isoformat())))

    text = (
        f"üìÖ {dt1.date()} ‚Äî {dt2.date()}:\n"
        f"‚Ä¢ –ê–Ω–∫–µ—Ç—ã: {filled}\n"
        f"‚Ä¢ –¢–ó –≤—ã–¥–∞–Ω–æ: {got_tz}\n"
        f"‚Ä¢ –°—Å—ã–ª–∫–∏ –ø—Ä–∏—Å–ª–∞–Ω—ã: {done}\n"
        f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {req_pay}\n"
        f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {paid}\n"
    )
    await update.message.reply_text(text, reply_markup=menu_admin())
# ====== END: –ø–æ–≤—Ç–æ—Ä –≤—Å—Ç–∞–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ======

# ----- –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º -----
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @billyinemalo1", reply_markup=build_user_menu(uid))

# ----- –†–æ—É—Ç–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º -----
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –ê–¥–º–∏–Ω
    if is_mod(uid):
        if text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é":
            await update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=menu_admin()); return
        if text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel":
            return await export_to_excel(update, context)
        if text == "üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
            return await admin_status_start(update, context)
        if text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":
            return await admin_broadcast_ask_text(update, context)
        if text == "üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤":
            return await admin_summary(update, context)
        if text == "üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
            return await admin_unpaid(update, context)
        if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫":
            return await admin_save_draft_ask(update, context)
        if text == "üóÇ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏":
            return await admin_list_drafts(update, context)
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await start(update, context); return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await restart(update, context)
    if text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return await ask_username(update, context)
    if text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó":
        return await send_task(update, context)
    if text == "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
        return await task_done(update, context)
    if text == "‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞":
        return await decline(update, context)
    if text == "üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)":
        return await reconsider(update, context)
    if text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É":
        return await ask_payment(update, context)
    if text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        return await contact(update, context)

# ----- –≠–∫—Å–ø–æ—Ä—Ç (–æ–±—â–∏–π) -----
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(str(update.effective_user.id)):
        return
    data = ensure_data_schema()

    bloggers_df = pd.DataFrame.from_dict(data["bloggers"], orient="index")
    bloggers_df.index.name = "user_id"
    bloggers_df.to_excel(os.path.join(DATA_DIR, "bloggers.xlsx"))

    orders_df = pd.DataFrame.from_dict(data["orders"], orient="index")
    orders_df.index.name = "user_id"
    orders_df.to_excel(os.path.join(DATA_DIR, "orders.xlsx"))

    payments_list = []
    for pid, pdata in data["payments"].items():
        row = dict(pdata)
        row["payment_id"] = pid
        payments_list.append(row)
    payments_df = pd.DataFrame(payments_list)
    payments_df.to_excel(os.path.join(DATA_DIR, "payments.xlsx"), index=False)

    declines_rows: List[Dict[str, Any]] = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                declines_rows = json.load(f)
                if not isinstance(declines_rows, list):
                    declines_rows = []
        except Exception:
            declines_rows = []
    (pd.DataFrame(declines_rows) if declines_rows else pd.DataFrame(columns=["user_id", "reason", "timestamp"])) \
        .to_excel(os.path.join(DATA_DIR, "declines.xlsx"), index=False)

    try:
        export_payments_excel()
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å payments_export.xlsx –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞", exc_info=e)

    await update.message.reply_text(
        "–≠–∫—Å–ø–æ—Ä—Ç: bloggers.xlsx, orders.xlsx, payments.xlsx, declines.xlsx, payments_export.xlsx",
        reply_markup=menu_admin()
    )

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            uid = str(update.effective_user.id)
            await update.effective_message.reply_text(
                "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª.",
                reply_markup=build_user_menu(uid)
            )
    except Exception:
        pass

# ---------- –ê–í–¢–û-–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (JobQueue, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) ----------
async def job_scan_reminders(context: ContextTypes.DEFAULT_TYPE):
    data = ensure_data_schema()
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    today = datetime.now().date()

    # 1) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –¥–µ–¥–ª–∞–π–Ω–µ
    for uid, o in list(orders.items()):
        if o.get("status") == "assigned":
            deadline = o.get("deadline")
            if deadline:
                try:
                    d = datetime.strptime(deadline, "%Y-%m-%d").date()
                except Exception:
                    d = today
                if today >= d and not o.get("reminder_sent"):
                    try:
                        await context.application.bot.send_message(
                            uid,
                            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –°—Ä–æ–∫ –≤—ã–∫—É–ø–∞ –ø–æ –¢–ó –ø–æ–¥–æ—à—ë–ª. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏."
                        )
                        o["reminder_sent"] = True
                        data["orders"][uid] = o
                        save_data(data)
                    except Exception:
                        pass

    # 2) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –≤—ã–ø–ª–∞—Ç–∞—Ö > 7 –¥–Ω–µ–π
    for pid, p in list(payments.items()):
        if p.get("status") in {"pending", "review"} and not p.get("admin_remind_sent"):
            ts = p.get("timestamp")
            try:
                t0 = datetime.fromisoformat(ts) if ts else datetime.now()
            except Exception:
                t0 = datetime.now()
            if datetime.now() - t0 >= timedelta(days=7):
                uid = p.get("user_id")
                bloggers = data.get("bloggers", {})
                uname = bloggers.get(uid, {}).get("username", "")
                try:
                    await context.application.bot.send_message(
                        ADMIN_ID,
                        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ ‚Ññ {pid}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uname} (id:{uid})"
                    )
                    p["admin_remind_sent"] = True
                    data["payments"][pid] = p
                    save_data(data)
                except Exception:
                    pass

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    start_health_server()
    ensure_data_schema()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(on_error)

    # –ê–Ω–∫–µ—Ç–∞
    form_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$"), ask_username)],
        states={
            ASK_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_username)],
            ASK_SUBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_subs)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_platforms)],
            ASK_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_theme)],
            ASK_STATS: [MessageHandler(filters.PHOTO, save_stats)],
        },
        fallbacks=[],
    )

    # –û–ø–ª–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É$"), ask_payment)],
        states={
            WAITING_ORDER_PHOTO: [MessageHandler(filters.PHOTO, save_order_photo)],
            WAITING_BARCODE_PHOTO: [MessageHandler(filters.PHOTO, save_barcode_photo)],
            WAITING_PAYMENT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_payment_text)],
        },
        fallbacks=[],
    )

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∏)
    done_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞$"), task_done)],
        states={WAITING_LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_links)]},
        fallbacks=[],
    )

    # –û—Ç–∫–∞–∑
    decline_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞$"), decline)],
        states={WAITING_DECLINE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_decline_reason)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Å—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    admin_status_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é$"), admin_status_start)],
        states={ADMIN_WAITING_STATUS_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_status_wait_uid)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –ø–æ—Å–ª–µ ¬´–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ ‚Ä¶¬ª
    admin_receipt_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.PHOTO & filters.User(user_id=int(ADMIN_ID)), admin_wait_receipt)],
        states={ADMIN_WAITING_RECEIPT: [MessageHandler(filters.PHOTO, admin_wait_receipt)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ -> –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    admin_broadcast_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üì£ –†–∞—Å—Å—ã–ª–∫–∞$"), admin_broadcast_ask_text)],
        states={ADMIN_WAITING_BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_text)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    admin_draft_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫$"), admin_save_draft_ask)],
        states={ADMIN_WAITING_DRAFT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_draft_text)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∂–¥—ë–º —Ç–µ–∫—Å—Ç)
    admin_segcast_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_segcast_choose, pattern=r"^segcast:")],
        states={
            ADMIN_WAITING_SEGCAST_TEXT: [
                MessageHandler(filters.TEXT & filters.User(user_id=int(ADMIN_ID)), admin_segment_broadcast_text)
            ],
        },
        fallbacks=[],
    )

    # Callback‚Äô–∏
    app.add_handler(CallbackQueryHandler(on_admin_pay_done_callback, pattern=rf"^{PAY_DONE_PREFIX}"))
    app.add_handler(CallbackQueryHandler(on_admin_support_callback, pattern=rf"^{PAY_SUPPORT_PREFIX}"))
    app.add_handler(CallbackQueryHandler(on_broadcast_confirm, pattern=r"^broadcast:(yes|no)$"))
    app.add_handler(CallbackQueryHandler(on_segexport, pattern=r"^segexport:"))
    app.add_handler(CallbackQueryHandler(on_segment_broadcast_confirm, pattern=r"^segconfirm:(yes|no)$"))

    # –ê–¥–º–∏–Ω ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ¬´–ù–∞–ø–∏—Å–∞—Ç—å –±–ª–æ–≥–µ—Ä—É¬ª
    app.add_handler(MessageHandler(filters.TEXT & filters.User(user_id=int(ADMIN_ID)), admin_handle_support_text))

    # –ü—Ä–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏
    reconsider_handler = MessageHandler(filters.TEXT & filters.Regex(r"^üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª\(-–∞\)$"), reconsider)
    launch_handler = MessageHandler(filters.TEXT & filters.Regex(r"^üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), launch)  # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
    restart_handler = MessageHandler(filters.TEXT & filters.Regex(r"^üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("find", cmd_find))
    app.add_handler(CommandHandler("findid", cmd_findid))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    app.add_handler(form_handler)
    app.add_handler(payment_handler)
    app.add_handler(done_handler)
    app.add_handler(decline_handler)
    app.add_handler(admin_status_handler)
    app.add_handler(admin_receipt_handler)
    app.add_handler(admin_broadcast_handler)
    app.add_handler(admin_draft_handler)
    app.add_handler(admin_segcast_conv)
    app.add_handler(reconsider_handler)
    app.add_handler(launch_handler)
    app.add_handler(restart_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∫–∞–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω job_queue
    if getattr(app, "job_queue", None):
        app.job_queue.run_repeating(job_scan_reminders, interval=3600, first=60)
    else:
        logging.info("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

    app.run_polling(drop_pending_updates=True)
