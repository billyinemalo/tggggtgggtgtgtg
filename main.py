import os
import sys
import json
import uuid
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

#–õ–û–ì–ò –ò –í–ï–†–°–ò–ò
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

#ENV
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

#–ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–£–¢–ò
(
    ASK_USERNAME,
    ASK_SUBS,
    ASK_PLATFORMS,
    ASK_THEME,
    ASK_STATS,
    WAITING_PAYMENT,
    WAITING_ORDER_PHOTO,
    WAITING_BARCODE_PHOTO,
    WAITING_PAYMENT_TEXT,
    WAITING_LINKS,             #–æ–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–æ–ª–∏–∫
    WAITING_DECLINE_REASON     #–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
) = range(11)

DATA_DIR = "data"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
DECLINES_FILE = os.path.join(DATA_DIR, "declines.json")  #–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫–∞–∑–æ–≤

PLATFORMS = ["Wildberries", "Ozon", "Sima-Land"]

# –ú–µ–Ω—é –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)
menu_before_payment = ReplyKeyboardMarkup([
    [KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
    [KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")],
    [KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
], resize_keyboard=True)

# –ú–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ (—Å –æ–ø–ª–∞—Ç–æ–π)
menu_after_payment = ReplyKeyboardMarkup([
    [KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
    [KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")],
    [KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")],
    [KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
], resize_keyboard=True)

# ---------- –ü–û–î–ì–û–¢–û–í–ö–ê –•–†–ê–ù–ò–õ–ò–©–ê ----------
os.makedirs(DATA_DIR, exist_ok=True)

DEFAULT_DATA = {"bloggers": {}, "orders": {}, "payments": {}}

def load_data():
    if not os.path.exists(DATA_FILE):
        save_data(DEFAULT_DATA.copy())
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: dict):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_data_schema() -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É data.json –∏ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π bloggers/orders/payments."""
    os.makedirs(DATA_DIR, exist_ok=True)
    try:
        data = load_data()
    except Exception:
        data = {}
    changed = False
    for k in DEFAULT_DATA:
        if k not in data or not isinstance(data[k], dict):
            data[k] = {}
            changed = True
    if changed:
        save_data(data)
    return data

def append_decline(user_id: str, reason: str):
    """–õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª."""
    items = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                items = json.load(f)
                if not isinstance(items, list):
                    items = []
        except Exception:
            items = []
    items.append({
        "user_id": user_id,
        "reason": reason,
        "timestamp": datetime.now().isoformat()
    })
    with open(DECLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–≤—è–∑—å—é —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å –≤–∞–º–∏ üéâ\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=menu_before_payment
    )

# –ê–Ω–∫–µ—Ç–∞
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = update.message.text
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –≤—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = update.message.text
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7‚Äì14 –¥–Ω–µ–π")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏.")
        return ASK_STATS

    photo = update.message.photo[-1]
    context.user_data["reach_screenshot"] = photo.file_id

    data = ensure_data_schema()
    data["bloggers"][str(update.effective_user.id)] = dict(context.user_data)
    save_data(data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", reply_markup=menu_before_payment)
    return ConversationHandler.END

# –¢–ó
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = ensure_data_schema()
    orders = data["orders"]

    if user_id in orders:
        platform = orders[user_id]["platform"]
        order_date = orders[user_id]["order_date"]
    else:
        counts = {p: sum(1 for x in orders.values() if x.get("platform") == p) for p in PLATFORMS}
        platform = min(counts, key=counts.get) if counts else PLATFORMS[0]

        start_dt = datetime(2025, 9, 1)
        total = sum(counts.values())
        week = (total // 333) + 1
        order_date = (start_dt + timedelta(weeks=min(2, week))).strftime("%Y-%m-%d")

        orders[user_id] = {
            "platform": platform,
            "order_date": order_date,
            "status": "assigned",  # assigned -> links_received -> completed (–ø–æ —Ñ–∞–∫—Ç—É –æ–ø–ª–∞—Ç—ã)
            "links": []
        }
        save_data(data)

    await update.message.reply_text(
        f"–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{orders[user_id]['platform']}*\n"
        f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: *{orders[user_id]['order_date']}*\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ä–æ–ª–∏–∫. –í —Ä–æ–ª–∏–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:\n\n"
        f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –±—Ä–µ–Ω–¥ **–õ–∞—Å –ò–≥—Ä–∞—Å**\n"
        f"‚Ä¢ –ù–∞–∑–æ–≤–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é **–°–∏–º–∞ –õ–µ–Ω–¥**\n\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫.\n"
        f"–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî ¬´‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞¬ª.",
        parse_mode="Markdown",
        reply_markup=menu_before_payment
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫–∏
async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = ensure_data_schema()
    if user_id not in data["orders"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¢–ó: ¬´üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.", reply_markup=menu_before_payment)
        return ConversationHandler.END

    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö) –Ω–∞ —Ä–æ–ª–∏–∫(–∏).")
    return WAITING_LINKS

async def save_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = ensure_data_schema()
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ URL(—ã).")
        return WAITING_LINKS

    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –≥—Ä—É–±–æ (–≤—Å—ë, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL)
    parts = [p.strip() for p in text.replace("\n", " ").split(",") if p.strip()]
    links = []
    for p in parts:
        if p.startswith(("http://", "https://")):
            links.append(p)
    if not links:
        links = [text]  # –Ω–∞ —Å–ª—É—á–∞–π –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, –Ω–æ —Å http

    order = data["orders"].setdefault(user_id, {"platform": None, "order_date": None, "status": "assigned", "links": []})
    order["links"] = order.get("links", []) + links
    order["status"] = "links_received"
    save_data(data)

    await update.message.reply_text(
        "–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É: ¬´üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=menu_after_payment
    )
    return ConversationHandler.END

# –û—Ç–∫–∞–∑ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
async def decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = ensure_data_schema()
    if user_id not in data["orders"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¢–ó: ¬´üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.", reply_markup=menu_before_payment)
        return ConversationHandler.END
    await update.message.reply_text("–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòî\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    return WAITING_DECLINE_REASON

async def save_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    reason = (update.message.text or "").strip() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    data = ensure_data_schema()

    # –ª–æ–≥–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    append_decline(user_id, reason)

    # –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑
    if user_id in data["orders"]:
        data["orders"][user_id]["status"] = "declined"
        save_data(data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º –≤–∞—à—É –ø—Ä–∏—á–∏–Ω—É. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¢–ó.", reply_markup=menu_before_payment)
    return ConversationHandler.END

# –û–ø–ª–∞—Ç–∞
async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = ensure_data_schema()

    if user_id not in data["bloggers"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! üìã", reply_markup=menu_before_payment)
        return ConversationHandler.END

    order = data["orders"].get(user_id)
    if not order or order.get("status") not in ("links_received", "completed"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫ (¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª).", reply_markup=menu_before_payment)
        return ConversationHandler.END

    await update.message.reply_text("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞:", reply_markup=menu_after_payment)
    return WAITING_ORDER_PHOTO

async def save_order_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞.")
        return WAITING_ORDER_PHOTO
    photo = update.message.photo[-1]
    context.user_data["order_photo"] = photo.file_id
    await update.message.reply_text("2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ:")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.")
        return WAITING_BARCODE_PHOTO
    photo = update.message.photo[-1]
    context.user_data["barcode_photo"] = photo.file_id
    await update.message.reply_text("3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–º:")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    data = ensure_data_schema()
    payments = data["payments"]

    payment_id = str(uuid.uuid4())

    payments[payment_id] = {
        "user_id": user_id,
        "order_photo": context.user_data.get("order_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "text": text,
        "timestamp": datetime.now().isoformat()
    }
    save_data(data)

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞. –ù–æ–º–µ—Ä: {payment_id}. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
        reply_markup=menu_after_payment
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    ADMIN_ID = "1080067724"
    app = context.application
    try:
        await app.bot.send_message(ADMIN_ID, f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç {user_id} (–ù–æ–º–µ—Ä: {payment_id})")
        if context.user_data.get("order_photo"):
            await app.bot.send_photo(ADMIN_ID, context.user_data["order_photo"], caption="–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞")
        if context.user_data.get("barcode_photo"):
            await app.bot.send_photo(ADMIN_ID, context.user_data["barcode_photo"], caption="–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏")
        await app.bot.send_message(ADMIN_ID, f"üí≥ {text}")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã", exc_info=e)

    return ConversationHandler.END

# –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @billyinemalo1",
                                    reply_markup=menu_after_payment if can_pay(str(update.effective_user.id)) else menu_before_payment)

def can_pay(user_id: str) -> bool:
    data = ensure_data_schema()
    order = data["orders"].get(user_id)
    return bool(order and order.get("status") in ("links_received", "completed"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return await ask_username(update, context)
    elif text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó":
        return await send_task(update, context)
    elif text == "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
        return await task_done(update, context)
    elif text == "‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞":
        return await decline(update, context)
    elif text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É":
        return await ask_payment(update, context)
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        return await contact(update, context)

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != "1080067724":
        return
    data = ensure_data_schema()

    bloggers_df = pd.DataFrame.from_dict(data["bloggers"], orient="index")
    bloggers_df.index.name = "user_id"
    bloggers_df.to_excel(os.path.join(DATA_DIR, "bloggers.xlsx"))

    orders_df = pd.DataFrame.from_dict(data["orders"], orient="index")
    orders_df.index.name = "user_id"
    orders_df.to_excel(os.path.join(DATA_DIR, "orders.xlsx"))

    payments_list = []
    for payment_id, payment_data in data["payments"].items():
        pdict = dict(payment_data)
        pdict["payment_id"] = payment_id
        payments_list.append(pdict)
    payments_df = pd.DataFrame(payments_list)
    payments_df.to_excel(os.path.join(DATA_DIR, "payments.xlsx"), index=False)

    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: bloggers.xlsx, orders.xlsx, payments.xlsx")

# ---------- HEALTHCHECK (–¥–ª—è Render) ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"ok")
        def log_message(self, *_):
            pass

    port = int(os.environ.get("PORT", 8080))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–∂–µ —á–∏–Ω–∏–º üôè")
    except Exception:
        pass

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    # 1) healthcheck –∏ —Å—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
    start_health_server()
    ensure_data_schema()

    # 2) Telegram bot (PTB 21.x)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(on_error)

    # –ê–Ω–∫–µ—Ç–∞ (Conversation)
    form_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), ask_username)],
        states={
            ASK_USERNAME: [MessageHandler(filters.TEXT, save_username)],
            ASK_SUBS: [MessageHandler(filters.TEXT, save_subs)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT, save_platforms)],
            ASK_THEME: [MessageHandler(filters.TEXT, save_theme)],
            ASK_STATS: [MessageHandler(filters.PHOTO, save_stats)],
        },
        fallbacks=[],
    )

    # –û–ø–ª–∞—Ç–∞ (Conversation)
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É"), ask_payment)],
        states={
            WAITING_ORDER_PHOTO: [MessageHandler(filters.PHOTO, save_order_photo)],
            WAITING_BARCODE_PHOTO: [MessageHandler(filters.PHOTO, save_barcode_photo)],
            WAITING_PAYMENT_TEXT: [MessageHandler(filters.TEXT, save_payment_text)],
        },
        fallbacks=[],
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Conversation)
    done_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), task_done)],
        states={
            WAITING_LINKS: [MessageHandler(filters.TEXT, save_links)],
        },
        fallbacks=[],
    )

    # –û—Ç–∫–∞–∑ (Conversation)
    decline_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"), decline)],
        states={
            WAITING_DECLINE_REASON: [MessageHandler(filters.TEXT, save_decline_reason)],
        },
        fallbacks=[],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_to_excel))
    app.add_handler(form_handler)
    app.add_handler(payment_handler)
    app.add_handler(done_handler)
    app.add_handler(decline_handler)
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    # –û–¥–∏–Ω –≤—ã–∑–æ–≤ ‚Äî –±–ª–æ–∫–∏—Ä—É—é—â–∏–π polling –¥–ª—è v21.x
    app.run_polling(drop_pending_updates=True)
