# main.py
import os
import sys
import re
import json
import uuid
import secrets
import logging
import threading
import hashlib
import random
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ENV")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ / –ü–£–¢–ò ----------
(
    ASK_USERNAME,
    ASK_SUBS,
    ASK_PLATFORMS,
    ASK_THEME,
    ASK_STATS,

    WAITING_REVIEW_PHOTO,      # —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ (–≤–º–µ—Å—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–∫–∞–∑–∞)
    WAITING_BARCODE_PHOTO,     # —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    WAITING_OZON_ORDER,        # –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è Ozon
    WAITING_WB_RECEIPT,        # —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è WB
    WAITING_PAYMENT_TEXT,      # —Ä–µ–∫–≤–∏–∑–∏—Ç—ã/–§–ò–û

    WAITING_LINKS,
    WAITING_DECLINE_REASON,

    ADMIN_WAITING_STATUS_USER,
    ADMIN_WAITING_RECEIPT,
    ADMIN_WAITING_BROADCAST_TEXT,
    ADMIN_WAITING_SEGCAST_TEXT,
    ADMIN_WAITING_DRAFT_TEXT,

    ADMIN_WAITING_SUPPORT_TEXT,  # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä—É –ø–æ –∑–∞—è–≤–∫–µ
) = range(18)

DATA_DIR = "data"
MEDIA_DIR = "media"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
DECLINES_FILE = os.path.join(DATA_DIR, "declines.json")
PAYMENTS_EXPORT_XLSX = os.path.join(DATA_DIR, "payments_export.xlsx")
AUDIT_LOG = os.path.join(DATA_DIR, "audit.log")

ADMIN_ID = "1080067724"       # —Ç–≤–æ–π Telegram ID (—Å—Ç—Ä–æ–∫–æ–π)
MODERATOR_IDS: List[str] = []  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

PLATFORMS = ["Wildberries", "Ozon"]  # Sima-Land —É–±—Ä–∞–Ω

# --- —Å–µ–≥–º–µ–Ω—Ç—ã ---
SEG_FILLED = "filled_form"
SEG_GOT_TZ = "got_tz"
SEG_DONE = "links_received"
SEG_REQ_PAY = "requested_pay"
SEG_PAID = "paid"
SEG_NOT_PAID = "not_paid"

# --- callback prefixes ---
CB_PAY_DONE = "pay_done:"           # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
CB_SUPPORT  = "support:"            # –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–ª–æ–≥–µ—Ä—É –ø–æ –∑–∞—è–≤–∫–µ
CB_REWORK   = "rework:"             # –≤–µ—Ä–Ω—É—Ç—å –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É
CB_CANCEL   = "cancel:"             # –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
SEGCAST_PREFIX = "segcast:"
SEGCONFIRM_PREFIX = "segconfirm:"
BROADCAST_PREVIEW_CB_YES = "broadcast:yes"
BROADCAST_PREVIEW_CB_NO  = "broadcast:no"
SEGEXPORT_PREFIX = "segexport:"

# ---------- –•–†–ê–ù–ò–õ–ò–©–ï ----------
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

DEFAULT_DATA: Dict[str, Any] = {
    "bloggers": {},     # user_id -> –ø—Ä–æ—Ñ–∏–ª—å (username, subs, platforms, theme, reach_screenshot, consent_ts, ...)
    "orders": {},       # user_id -> {platform, order_date, deadline, status, links, tz_assigned_at, reminder_sent}
    "payments": {},     # payment_id -> {...}
    "drafts": [],
    "referrals": {},
    "media_hashes": {}, # file_hash -> {"user_id":..., "type": "review/barcode/receipt"}
}

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def is_admin(uid: str) -> bool:
    return uid == ADMIN_ID

def is_mod(uid: str) -> bool:
    return uid in MODERATOR_IDS or is_admin(uid)

def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        save_data(DEFAULT_DATA.copy())
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_data_schema() -> Dict[str, Any]:
    try:
        data = load_data()
    except Exception:
        data = {}
    changed = False
    for k, v in DEFAULT_DATA.items():
        if k not in data or not isinstance(data[k], type(v)):
            data[k] = v if not isinstance(v, dict) else {}
            changed = True
    if changed:
        save_data(data)
    return data

def audit(action: str, actor_id: str, payload: Dict[str, Any] | None = None):
    try:
        os.makedirs(DATA_DIR, exist_ok=True)
        line = {
            "ts": datetime.now().isoformat(),
            "action": action,
            "actor": actor_id,
            "payload": payload or {}
        }
        with open(AUDIT_LOG, "a", encoding="utf-8") as f:
            f.write(json.dumps(line, ensure_ascii=False) + "\n")
    except Exception:
        logging.exception("audit write failed")

def append_decline(user_id: str, reason: str):
    items = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                items = json.load(f)
                if not isinstance(items, list):
                    items = []
        except Exception:
            items = []
    items.append({"user_id": user_id, "reason": reason, "timestamp": datetime.now().isoformat()})
    with open(DECLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)
    audit("decline_reason", user_id, {"reason": reason})

def menu_for(uid: str) -> ReplyKeyboardMarkup:
    data = ensure_data_schema()
    filled = uid in data["bloggers"]
    has_order = uid in data["orders"]
    status = data["orders"].get(uid, {}).get("status")

    # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    rows = []
    # –ê–Ω–∫–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not filled:
        rows.append([KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")])
    rows.append([KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")])
    if has_order and status == "links_received":
        rows.append([KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")])
    elif has_order:
        rows.append([KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")])
    rows.append([KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")])
    rows.append([KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])

    # Admin
    if is_mod(uid):
        rows.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def user_filled_form(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["bloggers"]

def user_has_order(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["orders"]

def order_status(user_id: str) -> Optional[str]:
    data = ensure_data_schema()
    return data["orders"].get(user_id, {}).get("status")

def set_order_links_received(user_id: str, links: List[str]):
    data = ensure_data_schema()
    o = data["orders"].setdefault(user_id, {
        "platform": None, "order_date": None, "deadline": None, "status": "assigned", "links": []
    })
    o["links"] = o.get("links", []) + links
    o["status"] = "links_received"
    save_data(data)
    audit("links_received", user_id, {"links": links})

def short_payment_id() -> str:
    return "PAY" + secrets.token_hex(3).upper()

def normalize_url(u: str) -> str:
    u = u.strip()
    # —É–±–∏—Ä–∞–µ–º UTM/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞
    u = re.sub(r"(\?|&)(utm_[^=]+|fbclid|gclid|yclid)=[^&]+", "", u, flags=re.I)
    u = re.sub(r"[?&]+$", "", u)
    return u

def is_card_like(text: str) -> bool:
    # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
    digits = re.sub(r"\D", "", text)
    if len(digits) < 12 or len(digits) > 20:
        return False
    # –§–ò–û –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç?
    return bool(re.search(r"[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+ [–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+", text))

async def save_photo_locally(bot, file_id: str, path: str) -> Optional[str]:
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        tg_file = await bot.get_file(file_id)
        await tg_file.download_to_drive(path)
        # –ø–æ—Å—á–∏—Ç–∞–µ–º —Ö–µ—à –¥–ª—è –∞–Ω—Ç–∏—Ñ—Ä–æ–¥–∞
        with open(path, "rb") as f:
            h = hashlib.sha256(f.read()).hexdigest()
        return h
    except Exception as e:
        logging.exception(f"save_photo failed: {path}", exc_info=e)
        return None

def mark_media_hash(h: str, user_id: str, kind: str):
    data = ensure_data_schema()
    m = data.get("media_hashes", {})
    m[h] = {"user_id": user_id, "type": kind, "ts": datetime.now().isoformat()}
    data["media_hashes"] = m
    save_data(data)
    audit("media_saved", user_id, {"hash": h, "type": kind})

def is_media_duplicate(h: str) -> bool:
    data = ensure_data_schema()
    return h in data.get("media_hashes", {})

def export_payments_excel():
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    payments = data.get("payments", {})

    rows = []
    for pid, p in payments.items():
        uid = p.get("user_id", "")
        user = bloggers.get(uid, {})
        uname = user.get("username", "")
        pay_text = p.get("text", "")
        links = p.get("links", []) or []
        first_link = links[0] if links else ""
        rows.append({
            "–ù–∏–∫–Ω–µ–π–º": uname,
            "–¢–ì –∞–π–¥–∏": uid,
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã": pay_text,
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫": first_link,
            "–°—Ç–∞—Ç—É—Å": p.get("status", "")
        })

    df = pd.DataFrame(rows, columns=["–ù–∏–∫–Ω–µ–π–º", "–¢–ì –∞–π–¥–∏", "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫", "–°—Ç–∞—Ç—É—Å"])
    df.to_excel(PAYMENTS_EXPORT_XLSX, index=False)

# ---------- HEALTHCHECK ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self): self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
        def log_message(self, *_): pass
    port = int(os.environ.get("PORT", "10000"))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- /start ----------
GREETINGS = [
    "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É? ‚ú®",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É üëá",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å! –ü–∞—Ä–∞ —à–∞–≥–æ–≤ ‚Äî –∏ —Å—Ç–∞—Ä—Ç—É–µ–º üöÄ",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    data = ensure_data_schema()
    # —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥ –¢–ó ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ
    greet = random.choice(GREETINGS)
    text = (
        f"{greet}\n\n"
        "1) –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É (–æ–¥–∏–Ω —Ä–∞–∑).\n"
        "2) –ü–æ–ª—É—á–∏—Ç–µ –¢–ó, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
        "3) –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –æ–ø–ª–∞—Ç—É ‚Äî –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π."
    )
    await update.message.reply_text(text, reply_markup=menu_for(uid))

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    context.user_data.clear()
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üëá", reply_markup=menu_for(uid))

# ---------- –ê–Ω–∫–µ—Ç–∞ ----------
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if user_filled_form(uid):
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–∏–∫/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text.strip()
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –í–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = update.message.text.strip()
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –í—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text.strip()
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = update.message.text.strip()
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ö–≤–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7‚Äì14 –¥–Ω–µ–π.")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏.")
        return ASK_STATS

    photo = update.message.photo[-1]
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    path = os.path.join(MEDIA_DIR, uid, "reach.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        mark_media_hash(h, uid, "reach")

    data = ensure_data_schema()
    blogger = data["bloggers"].get(uid, {})
    blogger.update(dict(context.user_data))
    blogger["reach_screenshot"] = photo.file_id
    blogger["username"] = blogger.get("username") or (update.effective_user.username or "")
    blogger["consent_ts"] = datetime.now().isoformat()  # —Ñ–∏–∫—Å–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    data["bloggers"][uid] = blogger
    save_data(data)
    audit("form_filled", uid, {"username": blogger.get("username")})

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ---------- –¢–ó ----------
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    data = ensure_data_schema()
    orders = data["orders"]

    if uid in orders:
        await update.message.reply_text(
            "–¢–ó —É–∂–µ –≤—ã–¥–∞–Ω–æ. –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.",
            reply_markup=menu_for(uid)
        )
        return ConversationHandler.END

    # –Ω–∞–∑–Ω–∞—á–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ –±–∞–ª–∞–Ω—Å—É
    counts = {p: sum(1 for x in orders.values() if x.get("platform") == p) for p in PLATFORMS}
    platform = min(counts, key=counts.get) if counts else PLATFORMS[0]

    today = datetime.now().date()
    order_date = (today + timedelta(days=1)).strftime("%Y-%m-%d")
    deadline   = (today + timedelta(days=4)).strftime("%Y-%m-%d")

    orders[uid] = {
        "platform": platform,
        "order_date": order_date,
        "deadline": deadline,
        "status": "assigned",
        "links": [],
        "tz_assigned_at": datetime.now().isoformat(),
        "reminder_sent": False,
    }
    save_data(data)
    audit("tz_assigned", uid, {"platform": platform, "deadline": deadline})

    tz_text = (
        f"–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{platform}*\n"
        f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: *{order_date}*\n"
        f"–î–µ–¥–ª–∞–π–Ω –≤—ã–∫—É–ø–∞: *–¥–æ {deadline}*\n\n"
        "‚ùó –¢–ó:\n"
        "1) –ó–∞–∫–∞–∂–∏—Ç–µ –∏ –≤—ã–∫—É–ø–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É *¬´–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞¬ª*.\n"
        f"2) –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–∞ *{platform}*.\n"
        "3) –°–Ω–∏–º–∏—Ç–µ Reels‚Äë–æ–±–∑–æ—Ä —Å –æ–∑–≤—É—á–∫–æ–π: –ø–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –∏–≥—Ä—É.\n"
        "4) –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "*5) –í–æ–∑–≤—Ä–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω.*\n"
        "6) –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ *7 –¥–Ω–µ–π* –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã.\n\n"
        "–ì–æ—Ç–æ–≤–æ? –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏."
    )
    await update.message.reply_text(tz_text, parse_mode="Markdown", reply_markup=menu_for(uid))

# ---------- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∏) ----------
async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É/—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫(–∏). –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    return WAITING_LINKS

async def save_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    raw = (update.message.text or "").strip()
    if not raw:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")
        return WAITING_LINKS

    parts = [normalize_url(p) for p in re.split(r"[,\s]+", raw) if p.strip()]
    links = [p for p in parts if p.startswith(("http://", "https://"))]
    if not links:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")
        return WAITING_LINKS

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    data = ensure_data_schema()
    all_links = set()
    for uo in data["orders"].values():
        for l in uo.get("links", []) or []:
            all_links.add(normalize_url(l))

    duplicates = [l for l in links if l in all_links]
    set_order_links_received(uid, links)

    if duplicates:
        # —Å–∏–≥–Ω–∞–ª –∞–¥–º–∏–Ω—É + —Å—Ç–∞—Ç—É—Å –ø–æ–¥ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ–º
        bloggers = data.get("bloggers", {})
        uname = bloggers.get(uid, {}).get("username", "")
        txt = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏ —Å—Å—ã–ª–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + "\n".join(f"- {l}" for l in duplicates)
        try:
            await context.application.bot.send_message(ADMIN_ID, f"{txt}\n\n{uname} (id:{uid})")
        except Exception:
            pass
        # –ø–æ–º–µ—Ç–∏–º –∑–∞–∫–∞–∑
        o = data["orders"].get(uid, {})
        o["status"] = "under_review"
        data["orders"][uid] = o
        save_data(data)
        audit("links_duplicate", uid, {"duplicates": duplicates})

    await update.message.reply_text("–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ---------- –û—Ç–∫–∞–∑ ----------
async def decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("–ñ–∞–ª—å. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.")
    return WAITING_DECLINE_REASON

async def save_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    reason = (update.message.text or "").strip() or "‚Äî"
    append_decline(uid, reason)
    data = ensure_data_schema()
    if uid in data["orders"]:
        data["orders"][uid]["status"] = "declined"
        save_data(data)
    await update.message.reply_text("–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ---------- –û–ø–ª–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ----------
async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    data = ensure_data_schema()

    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    st = order_status(uid)
    if st not in ("links_received", "under_review"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    # –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
    for p in data["payments"].values():
        if p.get("user_id") == uid and p.get("status") in ("pending", "under_review"):
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", reply_markup=menu_for(uid))
            return ConversationHandler.END

    await update.message.reply_text("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –í–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.", reply_markup=menu_for(uid))
    return WAITING_REVIEW_PHOTO

async def save_review_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞.")
        return WAITING_REVIEW_PHOTO

    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "review.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (review) –æ—Ç {uid}")
        mark_media_hash(h, uid, "review")
    context.user_data["review_photo"] = photo.file_id

    await update.message.reply_text("2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ *—Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ* —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.", parse_mode="Markdown")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.")
        return WAITING_BARCODE_PHOTO

    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "barcode.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (barcode) –æ—Ç {uid}")
        mark_media_hash(h, uid, "barcode")
    context.user_data["barcode_photo"] = photo.file_id

    # –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    data = ensure_data_schema()
    platform = data["orders"].get(uid, {}).get("platform", "")
    if platform == "Ozon":
        await update.message.reply_text("3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞ Ozon.")
        return WAITING_OZON_ORDER
    else:  # Wildberries
        await update.message.reply_text("3Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å WB.")
        return WAITING_WB_RECEIPT

async def save_ozon_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    order_no = (update.message.text or "").strip()
    if not re.fullmatch(r"[A-Z0-9\-]{6,}", order_no, flags=re.I):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–µ—Ä–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WAITING_OZON_ORDER
    context.user_data["ozon_order_no"] = order_no
    await update.message.reply_text("4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
    return WAITING_PAYMENT_TEXT

async def save_wb_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å WB.")
        return WAITING_WB_RECEIPT

    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "wb_receipt.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (wb_receipt) –æ—Ç {uid}")
        mark_media_hash(h, uid, "wb_receipt")
    context.user_data["wb_receipt_photo"] = photo.file_id

    await update.message.reply_text("4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    pay_text = (update.message.text or "").strip()
    if not is_card_like(pay_text):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∫–∞–∑–∞–Ω—ã —Å –æ—à–∏–±–∫–æ–π. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
        return WAITING_PAYMENT_TEXT

    data = ensure_data_schema()
    order = data["orders"].get(uid, {})
    links = order.get("links", [])
    platform = order.get("platform", "")

    payment_id = short_payment_id()
    status = "pending"
    # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –¥—É–±–ª—å-—Å—Å—ã–ª–∫–∏, –¥–µ—Ä–∂–∏–º under_review
    if order.get("status") == "under_review":
        status = "under_review"

    data["payments"][payment_id] = {
        "user_id": uid,
        "review_photo": context.user_data.get("review_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "wb_receipt_photo": context.user_data.get("wb_receipt_photo"),
        "ozon_order_no": context.user_data.get("ozon_order_no"),
        "text": pay_text,
        "links": links,
        "platform": platform,
        "timestamp": datetime.now().isoformat(),
        "status": status,
        "admin_msg_id": None,
    }
    save_data(data)
    export_payments_excel()
    audit("payment_requested", uid, {"payment_id": payment_id, "status": status})

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–æ–º–µ—Ä: {payment_id}.\n–°—Ç–∞—Ç—É—Å: { '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' if status=='under_review' else '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' }.",
        reply_markup=menu_for(uid)
    )

    # ---- –ê–¥–º–∏–Ω—É: –ø–∞—á–∫–æ–π + –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ----
    bloggers = data.get("bloggers", {})
    uname = bloggers.get(uid, {}).get("username", "")
    links_text
