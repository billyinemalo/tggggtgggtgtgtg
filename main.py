# main.py
import os
import sys
import re
import json
import secrets
import logging
import threading
import hashlib
import random
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ---------- –õ–û–ì–ò –ò –í–ï–†–°–ò–ò ----------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–£–¢–ò ----------
(
    ASK_USERNAME,
    ASK_SUBS,
    ASK_PLATFORMS,
    ASK_THEME,
    ASK_STATS,

    WAITING_REVIEW_PHOTO,    # —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ (–≤–º–µ—Å—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–∫–∞–∑–∞)
    WAITING_BARCODE_PHOTO,   # —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    WAITING_OZON_ORDER,      # –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è Ozon
    WAITING_WB_RECEIPT,      # —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è WB
    WAITING_PAYMENT_TEXT,    # —Ä–µ–∫–≤–∏–∑–∏—Ç—ã/–§–ò–û

    WAITING_LINKS,
    WAITING_DECLINE_REASON,

    ADMIN_WAITING_STATUS_USER,
    ADMIN_WAITING_RECEIPT,
    ADMIN_WAITING_BROADCAST_TEXT,
    ADMIN_WAITING_SEGCAST_TEXT,
    ADMIN_WAITING_DRAFT_TEXT,
    ADMIN_WAITING_SUPPORT_TEXT,  # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –±–ª–æ–≥–µ—Ä—É –ø–æ –∑–∞—è–≤–∫–µ
) = range(18)

DATA_DIR = "data"
MEDIA_DIR = "media"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
DECLINES_FILE = os.path.join(DATA_DIR, "declines.json")
PAYMENTS_EXPORT_XLSX = os.path.join(DATA_DIR, "payments_export.xlsx")
AUDIT_LOG = os.path.join(DATA_DIR, "audit.log")

ADMIN_ID = "1080067724"  # —Ç–≤–æ–π Telegram ID (—Å—Ç—Ä–æ–∫–æ–π)
MODERATOR_IDS: List[str] = []  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤

# –ü–ª–æ—â–∞–¥–∫–∏
PLATFORMS = ["Wildberries", "Ozon"]

# --- —Å–µ–≥–º–µ–Ω—Ç—ã ---
SEG_FILLED = "filled_form"
SEG_GOT_TZ = "got_tz"
SEG_DONE = "links_received"
SEG_REQ_PAY = "requested_pay"
SEG_PAID = "paid"
SEG_NOT_PAID = "not_paid"

# --- callback prefixes ---
SEGCAST_PREFIX = "segcast:"
SEGCONFIRM_PREFIX = "segconfirm:"
BROADCAST_PREVIEW_CB_YES = "broadcast:yes"
BROADCAST_PREVIEW_CB_NO = "broadcast:no"
SEGEXPORT_PREFIX = "segexport:"

CB_PAY_DONE = "pay_done:"
CB_SUPPORT  = "support:"   # support:<payment_id>:<user_id>

# ---------- –†–û–õ–ò + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID ----------
def _norm_uid(u) -> str:
    try:
        return str(int(u))
    except Exception:
        return str(u)

def _norm_uid_list(lst):
    out = []
    for x in lst:
        try:
            out.append(str(int(x)))
        except Exception:
            out.append(str(x))
    return out

def is_admin(uid) -> bool:
    return _norm_uid(uid) == _norm_uid(ADMIN_ID)

def is_mod(uid) -> bool:
    return _norm_uid(uid) in {_norm_uid(ADMIN_ID), *_norm_uid_list(MODERATOR_IDS)}

# ---------- –ü–û–î–ì–û–¢–û–í–ö–ê –•–†–ê–ù–ò–õ–ò–©–ê ----------
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

DEFAULT_DATA: Dict[str, Any] = {
    "bloggers": {},     # user_id -> –ø—Ä–æ—Ñ–∏–ª—å
    "orders": {},       # user_id -> {platform, order_date, deadline, status, links, tz_assigned_at, reminder_sent}
    "payments": {},     # payment_id -> {...}
    "drafts": [],       # [{text, ts}]
    "referrals": {},    # ref_id -> [user_ids...]
    "media_hashes": {}, # file_hash -> {user_id, type, ts}
}

def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        save_data(DEFAULT_DATA.copy())
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_data_schema() -> Dict[str, Any]:
    try:
        data = load_data()
    except Exception:
        data = {}
    changed = False
    for k, default_val in DEFAULT_DATA.items():
        if k not in data or not isinstance(data[k], type(default_val)):
            data[k] = default_val if not isinstance(default_val, dict) else {}
            changed = True
    if changed:
        save_data(data)
    return data

# ---------- –ê–£–î–ò–¢ ----------
def audit(action: str, actor_id: str, payload: Dict[str, Any] | None = None):
    try:
        os.makedirs(DATA_DIR, exist_ok=True)
        line = {
            "ts": datetime.now().isoformat(),
            "action": action,
            "actor": actor_id,
            "payload": payload or {}
        }
        with open(AUDIT_LOG, "a", encoding="utf-8") as f:
            f.write(json.dumps(line, ensure_ascii=False) + "\n")
    except Exception:
        logging.exception("audit write failed")

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
def user_filled_form(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["bloggers"]

def user_has_order(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["orders"]

def order_status(user_id: str) -> Optional[str]:
    data = ensure_data_schema()
    return data["orders"].get(user_id, {}).get("status")

def set_order_links_received(user_id: str, links: List[str]):
    data = ensure_data_schema()
    o = data["orders"].setdefault(user_id, {
        "platform": None, "order_date": None, "deadline": None, "status": "assigned", "links": []
    })
    o["links"] = o.get("links", []) + links
    o["status"] = "links_received"
    data["orders"][user_id] = o
    save_data(data)
    audit("links_received", user_id, {"links": links})

def short_payment_id() -> str:
    return "PAY" + secrets.token_hex(3).upper()

def normalize_url(u: str) -> str:
    u = u.strip()
    u = re.sub(r"(\?|&)(utm_[^=]+|fbclid|gclid|yclid)=[^&]+", "", u, flags=re.I)
    u = re.sub(r"[?&]+$", "", u)
    return u

def is_card_like(text: str) -> bool:
    digits = re.sub(r"\D", "", text)
    if len(digits) < 12 or len(digits) > 20:
        return False
    return bool(re.search(r"[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+ [–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+", text))

async def save_photo_locally(bot, file_id: str, path: str) -> Optional[str]:
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        tg_file = await bot.get_file(file_id)
        await tg_file.download_to_drive(path)
        with open(path, "rb") as f:
            h = hashlib.sha256(f.read()).hexdigest()
        return h
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª {path}", exc_info=e)
        return None

def mark_media_hash(h: str, user_id: str, kind: str):
    data = ensure_data_schema()
    m = data.get("media_hashes", {})
    m[h] = {"user_id": user_id, "type": kind, "ts": datetime.now().isoformat()}
    data["media_hashes"] = m
    save_data(data)
    audit("media_saved", user_id, {"hash": h, "type": kind})

def is_media_duplicate(h: str) -> bool:
    data = ensure_data_schema()
    return h in data.get("media_hashes", {})

def append_decline(user_id: str, reason: str):
    items: List[Dict[str, Any]] = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                items = json.load(f)
                if not isinstance(items, list):
                    items = []
        except Exception:
            items = []
    items.append({"user_id": user_id, "reason": reason, "timestamp": datetime.now().isoformat()})
    with open(DECLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)
    audit("decline_reason", user_id, {"reason": reason})

# ---- –ê–≤—Ç–æ-—ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ –µ–¥–∏–Ω—ã–π Excel ----
def export_payments_excel():
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    payments = data.get("payments", {})

    rows = []
    for pid, p in payments.items():
        uid = p.get("user_id", "")
        user = bloggers.get(uid, {})
        uname = user.get("username", "")
        pay_text = p.get("text", "")
        links = p.get("links", []) or []
        first_link = links[0] if links else ""
        rows.append({
            "–ù–∏–∫–Ω–µ–π–º": uname,
            "–¢–ì –∞–π–¥–∏": uid,
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã": pay_text,
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫": first_link,
            "–°—Ç–∞—Ç—É—Å": p.get("status", "")
        })

    df = pd.DataFrame(rows, columns=["–ù–∏–∫–Ω–µ–π–º", "–¢–ì –∞–π–¥–∏", "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–ª–∏–∫", "–°—Ç–∞—Ç—É—Å"])
    df.to_excel(PAYMENTS_EXPORT_XLSX, index=False)

# ---- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ú–ï–ù–Æ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----
def menu_for(uid: str) -> ReplyKeyboardMarkup:
    data = ensure_data_schema()
    filled = uid in data["bloggers"]
    has_order = uid in data["orders"]
    status = data["orders"].get(uid, {}).get("status")

    rows = []
    if not filled:
        rows.append([KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")])
    rows.append([KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")])

    if has_order and status in ("links_received", "under_review"):
        rows.append([KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")])
    elif has_order:
        rows.append([KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")])

    rows.append([KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")])
    rows.append([KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])

    if is_mod(uid):
        rows.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# ---------- HEALTHCHECK ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
        def log_message(self, *_): pass
    port = int(os.environ.get("PORT", "10000"))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- /start ----------
GREETINGS = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ? ‚ú®",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º üëá",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–∞—Ä–∞ —à–∞–≥–æ–≤ ‚Äî –∏ —Å—Ç–∞—Ä—Ç—É–µ–º üöÄ",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    # —Ä–µ—Ñ–µ—Ä–∞–ª: /start ref_123
    if context.args:
        arg = context.args[0]
        if arg.startswith("ref_"):
            ref_by = arg[4:]
            data = ensure_data_schema()
            if uid not in data["bloggers"]:
                data["bloggers"][uid] = {}
            if not data["bloggers"][uid].get("ref_by"):
                data["bloggers"][uid]["ref_by"] = ref_by
                refs = data.get("referrals", {})
                lst = set(refs.get(ref_by, []))
                lst.add(uid)
                refs[ref_by] = sorted(list(lst))
                data["referrals"] = refs
                save_data(data)

    greet = random.choice(GREETINGS)
    await update.message.reply_text(
        f"{greet}\n\n"
        "1) –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É (–æ–¥–∏–Ω —Ä–∞–∑).\n"
        "2) –ü–æ–ª—É—á–∏—Ç–µ –¢–ó, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
        "3) –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –æ–ø–ª–∞—Ç—É ‚Äî –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.",
        reply_markup=menu_for(uid)
    )

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    context.user_data.clear()
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üëá", reply_markup=menu_for(uid))

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/–∞–¥–º–∏–Ω –≤—Ö–æ–¥
async def cmd_whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    await update.message.reply_text(f"you_id={u.id}\nusername=@{u.username}\nname={u.full_name}")

async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not is_mod(uid):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    try:
        context.bot_data.get("await_receipt_by_admin", {}).pop(uid, None)
        context.bot_data.get("await_support_by_admin", {}).pop(uid, None)
    except Exception:
        pass
    for k in ("segcast_target", "segcast_text", "segcast_ids", "broadcast_text"):
        context.user_data.pop(k, None)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"), KeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")],
        [KeyboardButton("üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"), KeyboardButton("üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"), KeyboardButton("üóÇ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏")],
        [KeyboardButton("üîé /find –Ω–∏–∫"), KeyboardButton("üîé /findid id"), KeyboardButton("üìÖ /stats 01.08-11.08")],
        [KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ], resize_keyboard=True))

# ----- –ê–Ω–∫–µ—Ç–∞ -----
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if user_filled_form(uid):
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = (update.message.text or "").strip()
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –í–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = (update.message.text or "").strip()
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –í—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = (update.message.text or "").strip()
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = (update.message.text or "").strip()
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ö–≤–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7‚Äì14 –¥–Ω–µ–π.")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏.")
        return ASK_STATS
    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "reach.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (reach) –æ—Ç {uid}")
        mark_media_hash(h, uid, "reach")

    data = ensure_data_schema()
    blogger = data["bloggers"].get(uid, {})
    blogger.update(dict(context.user_data))
    blogger["reach_screenshot"] = photo.file_id
    blogger["username"] = blogger.get("username") or (update.effective_user.username or "")
    blogger["consent_ts"] = datetime.now().isoformat()
    data["bloggers"][uid] = blogger
    save_data(data)
    audit("form_filled", uid, {"username": blogger.get("username")})

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ----- –¢–ó -----
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    data = ensure_data_schema()
    orders = data["orders"]

    if uid in orders:
        await update.message.reply_text(
            "–¢–ó —É–∂–µ –≤—ã–¥–∞–Ω–æ. –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.",
            reply_markup=menu_for(uid)
        )
        return ConversationHandler.END

    counts = {p: sum(1 for x in orders.values() if x.get("platform") == p) for p in PLATFORMS}
    platform = min(counts, key=counts.get) if counts else PLATFORMS[0]

    today = datetime.now().date()
    order_date = (today + timedelta(days=1)).strftime("%Y-%m-%d")
    deadline = (today + timedelta(days=4)).strftime("%Y-%m-%d")

    orders[uid] = {
        "platform": platform,
        "order_date": order_date,
        "deadline": deadline,
        "status": "assigned",
        "links": [],
        "tz_assigned_at": datetime.now().isoformat(),
        "reminder_sent": False,
    }
    save_data(data)
    audit("tz_assigned", uid, {"platform": platform, "deadline": deadline})

    text = (
        f"–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{platform}*\n"
        f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: *{order_date}*\n"
        f"–î–µ–¥–ª–∞–π–Ω –≤—ã–∫—É–ø–∞: *–¥–æ {deadline}*\n\n"
        "‚ùó –¢–ó:\n"
        "1) –ó–∞–∫–∞–∂–∏—Ç–µ –∏ –≤—ã–∫—É–ø–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É *¬´–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞¬ª*.\n"
        f"2) –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–∞ *{platform}*.\n"
        "3) –°–Ω–∏–º–∏—Ç–µ Reels‚Äë–æ–±–∑–æ—Ä —Å –æ–∑–≤—É—á–∫–æ–π: –ø–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –∏–≥—Ä—É.\n"
        "4) –ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "*5) –í–æ–∑–≤—Ä–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω.*\n"
        "6) –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ *7 –¥–Ω–µ–π* –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã.\n\n"
        "–ì–æ—Ç–æ–≤–æ? –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏."
    )
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=menu_for(uid))

# ----- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∏) -----
async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É/—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–ª–∏–∫(–∏). –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    return WAITING_LINKS

async def save_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    raw = (update.message.text or "").strip()
    if not raw:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")
        return WAITING_LINKS

    parts = [normalize_url(p) for p in re.split(r"[,\s]+", raw) if p.strip()]
    links = [p for p in parts if p.startswith(("http://", "https://"))]
    if not links:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL.")
        return WAITING_LINKS

    data = ensure_data_schema()
    all_links = set()
    for uo in data["orders"].values():
        for l in uo.get("links", []) or []:
            all_links.add(normalize_url(l))

    duplicates = [l for l in links if l in all_links]
    set_order_links_received(uid, links)

    if duplicates:
        bloggers = data.get("bloggers", {})
        uname = bloggers.get(uid, {}).get("username", "")
        txt = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏ —Å—Å—ã–ª–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" + "\n".join(f"- {l}" for l in duplicates)
        try:
            await context.application.bot.send_message(ADMIN_ID, f"{txt}\n\n{uname} (id:{uid})")
        except Exception:
            pass
        o = data["orders"].get(uid, {})
        o["status"] = "under_review"
        data["orders"][uid] = o
        save_data(data)
        audit("links_duplicate", uid, {"duplicates": duplicates})

    await update.message.reply_text("–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ----- –û—Ç–∫–∞–∑ -----
async def decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not user_has_order(uid):
        await update.message.reply_text("–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    await update.message.reply_text("–ñ–∞–ª—å. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞.")
    return WAITING_DECLINE_REASON

async def save_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    reason = (update.message.text or "").strip() or "‚Äî"
    append_decline(uid, reason)
    data = ensure_data_schema()
    if uid in data["orders"]:
        data["orders"][uid]["status"] = "declined"
        save_data(data)
    await update.message.reply_text("–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª.", reply_markup=menu_for(uid))
    return ConversationHandler.END

# ----- –û–ø–ª–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) -----
async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    data = ensure_data_schema()

    if not user_filled_form(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=menu_for(uid))
        return ConversationHandler.END
    if not user_has_order(uid):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    st = order_status(uid)
    if st not in ("links_received", "under_review"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.", reply_markup=menu_for(uid))
        return ConversationHandler.END

    # –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ user_id
    for p in data["payments"].values():
        if p.get("user_id") == uid and p.get("status") in ("pending", "under_review"):
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.", reply_markup=menu_for(uid))
            return ConversationHandler.END

    await update.message.reply_text("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –í–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–æ–≤–∞—Ä.", reply_markup=menu_for(uid))
    return WAITING_REVIEW_PHOTO

async def save_review_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞.")
        return WAITING_REVIEW_PHOTO
    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "review.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (review) –æ—Ç {uid}")
        mark_media_hash(h, uid, "review")
    context.user_data["review_photo"] = photo.file_id

    await update.message.reply_text("2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ *—Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ* —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ.", parse_mode="Markdown")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.")
        return WAITING_BARCODE_PHOTO
    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "barcode.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (barcode) –æ—Ç {uid}")
        mark_media_hash(h, uid, "barcode")
    context.user_data["barcode_photo"] = photo.file_id

    data = ensure_data_schema()
    platform = data["orders"].get(uid, {}).get("platform", "")
    if platform == "Ozon":
        await update.message.reply_text("3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞ Ozon.")
        return WAITING_OZON_ORDER
    else:  # Wildberries
        await update.message.reply_text("3Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å WB.")
        return WAITING_WB_RECEIPT

async def save_ozon_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_no = (update.message.text or "").strip()
    if not re.fullmatch(r"[A-Z0-9\-]{6,}", order_no, flags=re.I):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–µ—Ä–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WAITING_OZON_ORDER
    context.user_data["ozon_order_no"] = order_no
    await update.message.reply_text("4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
    return WAITING_PAYMENT_TEXT

async def save_wb_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å WB.")
        return WAITING_WB_RECEIPT
    photo = update.message.photo[-1]
    path = os.path.join(MEDIA_DIR, uid, "wb_receipt.jpg")
    h = await save_photo_locally(context.application.bot, photo.file_id, path)
    if h:
        if is_media_duplicate(h):
            await context.application.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞ (wb_receipt) –æ—Ç {uid}")
        mark_media_hash(h, uid, "wb_receipt")
    context.user_data["wb_receipt_photo"] = photo.file_id

    await update.message.reply_text("4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    pay_text = (update.message.text or "").strip()
    if not is_card_like(pay_text):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É–∫–∞–∑–∞–Ω—ã —Å –æ—à–∏–±–∫–æ–π. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è.")
        return WAITING_PAYMENT_TEXT

    data = ensure_data_schema()
    order = data["orders"].get(uid, {})
    links = order.get("links", [])
    platform = order.get("platform", "")

    payment_id = short_payment_id()
    status = "pending"
    if order.get("status") == "under_review":
        status = "under_review"

    data["payments"][payment_id] = {
        "user_id": uid,
        "review_photo": context.user_data.get("review_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "wb_receipt_photo": context.user_data.get("wb_receipt_photo"),
        "ozon_order_no": context.user_data.get("ozon_order_no"),
        "text": pay_text,
        "links": links,
        "platform": platform,
        "timestamp": datetime.now().isoformat(),
        "status": status,
        "admin_msg_id": None,
    }
    save_data(data)
    export_payments_excel()
    audit("payment_requested", uid, {"payment_id": payment_id, "status": status})

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–æ–º–µ—Ä: {payment_id}.\n–°—Ç–∞—Ç—É—Å: {'–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' if status=='under_review' else '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'}.",
        reply_markup=menu_for(uid)
    )

    # ---- –ê–¥–º–∏–Ω—É: –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–∫–∞–º–∏ ----
    app = context.application
    media = []
    if context.user_data.get("review_photo"):
        media.append(InputMediaPhoto(media=context.user_data["review_photo"], caption=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É #{payment_id}"))
    if context.user_data.get("barcode_photo"):
        media.append(InputMediaPhoto(media=context.user_data["barcode_photo"]))
    if context.user_data.get("wb_receipt_photo"):
        media.append(InputMediaPhoto(media=context.user_data["wb_receipt_photo"]))
    if media:
        try:
            await app.bot.send_media_group(ADMIN_ID, media=media)
        except Exception as e:
            logging.exception("send_media_group failed", exc_info=e)

    bloggers = data.get("bloggers", {})
    uname = bloggers.get(uid, {}).get("username", "")
    links_text = "\n".join(f"- {u}" for u in links) if links else "‚Äî"
    admin_text = (
        f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É #{payment_id}\n"
        f"üë§ –ù–∏–∫: {uname}\n"
        f"üÜî user_id: {uid}\n"
        f"üì¶ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
        f"üîó –°—Å—ã–ª–∫–∏:\n{links_text}\n"
        f"{'üìÑ Ozon-–∑–∞–∫–∞–∑: ' + context.user_data.get('ozon_order_no','‚Äî') if platform=='Ozon' else ''}\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{pay_text}\n\n"
        f"–î–µ–π—Å—Ç–≤–∏—è:"
    )

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ #{payment_id}", callback_data=f"{CB_PAY_DONE}{payment_id}")],
        [InlineKeyboardButton(f"üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–ª–æ–≥–µ—Ä—É #{payment_id}", callback_data=f"{CB_SUPPORT}{payment_id}:{uid}")]
    ])
    try:
        msg = await app.bot.send_message(ADMIN_ID, admin_text, reply_markup=kb)
        data = ensure_data_schema()
        data["payments"][payment_id]["admin_msg_id"] = msg.message_id
        save_data(data)
    except Exception as e:
        logging.exception("send admin text failed", exc_info=e)

    return ConversationHandler.END

# ----- –ê–¥–º–∏–Ω: –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ -----
async def on_admin_pay_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    query = update.callback_query
    await query.answer()

    try:
        payment_id = query.data.split(":", 1)[1]
    except Exception:
        payment_id = None

    if not payment_id:
        await query.edit_message_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")
        return

    context.bot_data.setdefault("await_receipt_by_admin", {})
    context.bot_data["await_receipt_by_admin"][_norm_uid(update.effective_user.id)] = payment_id

    try:
        await query.edit_message_reply_markup(
            InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é —á–µ–∫ –ø–æ #{payment_id}", callback_data=f"{CB_PAY_DONE}{payment_id}")]
            ])
        )
    except Exception:
        pass

    await query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{payment_id}.")

# --- –ê–¥–º–∏–Ω: –ø—Ä–∏—ë–º —á–µ–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def admin_wait_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END

    wait_map = context.bot_data.get("await_receipt_by_admin", {})
    payment_id = wait_map.get(_norm_uid(update.effective_user.id))

    if not payment_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –∑–∞—è–≤–∫–µ (¬´–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ ‚Ä¶¬ª), –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.")
        return ConversationHandler.END

    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return ADMIN_WAITING_RECEIPT

    photo = update.message.photo[-1]
    photo_id = photo.file_id

    data = ensure_data_schema()
    pay = data["payments"].get(payment_id)
    if not pay:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    user_id = pay["user_id"]
    await save_photo_locally(context.application.bot, photo_id, os.path.join(MEDIA_DIR, str(user_id), f"receipt_{payment_id}.jpg"))

    app = context.application
    try:
        await app.bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ #{payment_id}. –°–ø–∞—Å–∏–±–æ!")
        await app.bot.send_photo(user_id, photo_id, caption="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", exc_info=e)

    pay["status"] = "paid"
    order = data["orders"].get(user_id, {})
    order["status"] = "completed"
    data["orders"][user_id] = order
    save_data(data)
    export_payments_excel()
    audit("payment_paid", _norm_uid(update.effective_user.id), {"payment_id": payment_id, "user_id": user_id})

    admin_msg_id = pay.get("admin_msg_id")
    if admin_msg_id:
        try:
            await app.bot.edit_message_reply_markup(chat_id=ADMIN_ID, message_id=admin_msg_id, reply_markup=None)
            await app.bot.edit_message_text(chat_id=ADMIN_ID, message_id=admin_msg_id, text=f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ\n\n–ó–∞—è–≤–∫–∞ #{payment_id} –∑–∞–∫—Ä—ã—Ç–∞.")
        except Exception:
            pass

    try:
        del context.bot_data["await_receipt_by_admin"][_norm_uid(update.effective_user.id)]
    except Exception:
        pass

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –∏ –ø–æ–ª—É—á–∏–ª —á–µ–∫.")
    return ConversationHandler.END

# ----- –ê–¥–º–∏–Ω: ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–ª–æ–≥–µ—Ä—É¬ª -----
async def on_admin_support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    try:
        _, rest = q.data.split(":", 1)
        payment_id, user_id = rest.split(":", 1)
    except Exception:
        await q.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞—è–≤–∫—É.")
        return
    context.bot_data.setdefault("await_support_by_admin", {})
    context.bot_data["await_support_by_admin"][_norm_uid(update.effective_user.id)] = {"payment_id": payment_id, "user_id": user_id}
    await q.message.reply_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id:{user_id} (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ ¬´–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏¬ª).")
    return ADMIN_WAITING_SUPPORT_TEXT

async def admin_wait_support_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    entry = context.bot_data.get("await_support_by_admin", {}).get(_norm_uid(update.effective_user.id))
    if not entry:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–ª–æ–≥–µ—Ä—É ‚Ä¶¬ª –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END
    msg = (update.message.text or "").strip()
    if not msg:
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return ADMIN_WAITING_SUPPORT_TEXT

    user_id = entry["user_id"]
    payment_id = entry["payment_id"]
    try:
        await context.application.bot.send_message(user_id, f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{msg}")
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        audit("support_message", _norm_uid(update.effective_user.id), {"to": user_id, "payment_id": payment_id})
    except Exception as e:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logging.exception("support send failed", exc_info=e)

    try:
        del context.bot_data["await_support_by_admin"][_norm_uid(update.effective_user.id)]
    except Exception:
        pass
    return ConversationHandler.END

# ----- –ê–¥–º–∏–Ω: —Å—Ç–∞—Ç—É—Å –ø–æ user_id -----
def format_user_status(user_id: str, data: Dict[str, Any]) -> str:
    u = data["bloggers"].get(user_id, {})
    o = data["orders"].get(user_id, {})
    status = o.get("status", "‚Äî")
    links = o.get("links", [])
    uname = u.get("username") or "‚Äî"
    subs = u.get("subs") or "‚Äî"
    platform = o.get("platform") or "‚Äî"
    order_date = o.get("order_date") or "‚Äî"
    deadline = o.get("deadline") or "‚Äî"
    ref_by = u.get("ref_by") or "‚Äî"
    lines = [
        f"üë§ user_id: {user_id}",
        f"‚Ä¢ –ù–∏–∫/–∫–∞–Ω–∞–ª: {uname}",
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subs}",
        f"‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}",
        f"‚Ä¢ –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {order_date}",
        f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω –Ω–∞ –∑–∞–∫–∞–∑: {deadline}",
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä: {ref_by}",
    ]
    if links:
        lines.append("‚Ä¢ –°—Å—ã–ª–∫–∏:")
        for i, l in enumerate(links, 1):
            lines.append(f"   {i}. {l}")
    return "\n".join(lines)

async def admin_status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å.")
    return ADMIN_WAITING_STATUS_USER

async def admin_status_wait_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    uid = _norm_uid((update.message.text or "").strip())
    data = ensure_data_schema()
    if uid not in data["bloggers"] and uid not in data["orders"]:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    await update.message.reply_text(format_user_status(uid, data))
    return ConversationHandler.END

# ----- –ü–æ–∏—Å–∫ / –≠–∫—Å–ø–æ—Ä—Ç / –°–≤–æ–¥–∫–∞ / –†–∞—Å—Å—ã–ª–∫–∏ (–∫–∞–∫ –±—ã–ª–æ) -----
def compute_segments() -> Dict[str, List[str]]:
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    filled = set(bloggers.keys())
    got_tz = set(orders.keys())
    done = {uid for uid, o in orders.items() if o.get("status") == "links_received"}
    req_pay = {p.get("user_id") for p in payments.values() if p.get("user_id")}
    paid = {p.get("user_id") for p in payments.values() if p.get("status") == "paid"}
    not_paid = req_pay - paid

    return {
        SEG_FILLED: sorted(filled),
        SEG_GOT_TZ: sorted(got_tz),
        SEG_DONE: sorted(done),
        SEG_REQ_PAY: sorted(req_pay),
        SEG_PAID: sorted(paid),
        SEG_NOT_PAID: sorted(not_paid),
    }

def segment_human_name(seg: str) -> str:
    return {
        SEG_FILLED: "–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É",
        SEG_GOT_TZ: "–ü–æ–ª—É—á–∏–ª–∏ –¢–ó",
        SEG_DONE: "–í—ã–ø–æ–ª–Ω–∏–ª–∏ –¢–ó (–ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫–∏)",
        SEG_REQ_PAY: "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ –æ–ø–ª–∞—Ç—É",
        SEG_PAID: "–û–ø–ª–∞—á–µ–Ω–æ",
        SEG_NOT_PAID: "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ",
    }.get(seg, seg)

def format_segment_list(title: str, uids: List[str], bloggers: Dict[str, Any], max_lines: int = 200) -> str:
    lines = [f"‚Äî {title}: {len(uids)}"]
    cnt = 0
    for uid in uids:
        uname = bloggers.get(uid, {}).get("username", "‚Äî")
        lines.append(f"  ‚Ä¢ {uname} (id: {uid})")
        cnt += 1
        if cnt >= max_lines:
            lines.append(f"  ...–∏ –µ—â—ë {len(uids)-cnt}")
            break
    return "\n".join(lines)

async def admin_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    segments = compute_segments()

    blocks = []
    for seg_key in [SEG_FILLED, SEG_GOT_TZ, SEG_DONE, SEG_REQ_PAY, SEG_PAID, SEG_NOT_PAID]:
        title = segment_human_name(seg_key)
        uids = segments.get(seg_key, [])
        blocks.append(format_segment_list(title, uids, bloggers, max_lines=200))

    text = "üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):\n\n" + "\n\n".join(blocks)

    kb_rows = []
    for seg_key in [SEG_FILLED, SEG_GOT_TZ, SEG_DONE, SEG_REQ_PAY, SEG_PAID, SEG_NOT_PAID]:
        kb_rows.append([InlineKeyboardButton(f"üì£ –†–∞—Å—Å—ã–ª–∫–∞: {segment_human_name(seg_key)}", callback_data=f"{SEGCAST_PREFIX}{seg_key}")])
        kb_rows.append([InlineKeyboardButton(f"üßæ –≠–∫—Å–ø–æ—Ä—Ç: {segment_human_name(seg_key)}", callback_data=f"{SEGEXPORT_PREFIX}{seg_key}")])

    kb = InlineKeyboardMarkup(kb_rows)
    await update.message.reply_text(text, reply_markup=kb)

async def on_segcast_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    seg_key = q.data.split(":", 1)[1]
    context.user_data["segcast_target"] = seg_key
    name = segment_human_name(seg_key)
    await q.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç: ¬´{name}¬ª.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.")
    return ADMIN_WAITING_SEGCAST_TEXT

async def admin_segment_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    seg_key = context.user_data.get("segcast_target")
    if not seg_key:
        await update.message.reply_text("–°–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return ConversationHandler.END

    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    segments = compute_segments()
    target_ids = segments.get(seg_key, [])
    context.user_data["segcast_text"] = text
    context.user_data["segcast_ids"] = target_ids

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(f"‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(target_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data=f"{SEGCONFIRM_PREFIX}yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{SEGCONFIRM_PREFIX}no"),
    ]])
    preview = f"üì£ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è ¬´{segment_human_name(seg_key)}¬ª ({len(target_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):\n\n{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?"
    await update.message.reply_text(preview, reply_markup=kb)
    return ConversationHandler.END

async def on_segment_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    q = update.callback_query
    await q.answer()
    decision = q.data.split(":", 1)[1]

    if decision == "no":
        await q.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    text = context.user_data.get("segcast_text", "")
    target_ids: List[str] = context.user_data.get("segcast_ids", [])
    ok, fail = 0, 0
    failed_ids: List[str] = []
    app = context.application
    for uid in target_ids:
        try:
            await app.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
            failed_ids.append(uid)

    report = f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {ok}\n–û—à–∏–±–æ–∫: {fail}"
    if failed_ids:
        report += "\n\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (user_id):\n" + "\n".join(failed_ids[:100])
        if len(failed_ids) > 100:
            report += f"\n...–∏ –µ—â—ë {len(failed_ids)-100}"

    try:
        await q.edit_message_text(report)
    except Exception:
        await app.bot.send_message(ADMIN_ID, report)

def export_segment_to_excel(seg_key: str) -> str:
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    segments = compute_segments()
    uids = segments.get(seg_key, [])

    rows = []
    for uid in uids:
        o = data["orders"].get(uid, {})
        b = bloggers.get(uid, {})
        rows.append({
            "user_id": uid,
            "–ù–∏–∫–Ω–µ–π–º": b.get("username", ""),
            "–°—Ç–∞—Ç—É—Å": o.get("status", ""),
            "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞": o.get("platform", ""),
            "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": o.get("order_date", ""),
            "–î–µ–¥–ª–∞–π–Ω": o.get("deadline", ""),
            "–°—Å—ã–ª–∫–∞": (o.get("links") or [""])[0]
        })
    df = pd.DataFrame(rows)
    path = os.path.join(DATA_DIR, f"export_seg_{seg_key}.xlsx")
    df.to_excel(path, index=False)
    return path

async def on_segexport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()
    seg_key = q.data.split(":", 1)[1]
    p = export_segment_to_excel(seg_key)
    await q.message.reply_document(open(p, "rb"), filename=os.path.basename(p), caption=f"–≠–∫—Å–ø–æ—Ä—Ç: {segment_human_name(seg_key)}")

# ----- –ü–æ–∏—Å–∫ / –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ / –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ / –†–µ—Ñ–µ—Ä–∞–ª—ã / –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ / –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -----
async def cmd_find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    q = " ".join(context.args) if context.args else ""
    if not q:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <—á–∞—Å—Ç—å –Ω–∏–∫–∞>"); return
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    matches = []
    for uid, b in bloggers.items():
        name = (b.get("username") or "").lower()
        if q.lower() in name:
            matches.append(uid)
    if not matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
    resp = "\n\n".join(format_user_status(uid, data) for uid in matches[:20])
    await update.message.reply_text(resp)

async def cmd_findid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /findid <user_id>"); return
    uid = _norm_uid(context.args[0].strip())
    data = ensure_data_schema()
    if uid not in data["bloggers"] and uid not in data["orders"]:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    await update.message.reply_text(format_user_status(uid, data))

async def admin_broadcast_ask_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (–∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É).")
    return ADMIN_WAITING_BROADCAST_TEXT

async def admin_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    n = len(bloggers)

    context.user_data["broadcast_text"] = text
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {n} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data=BROADCAST_PREVIEW_CB_YES),
                                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=BROADCAST_PREVIEW_CB_NO)]])
    preview = f"üì£ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º {n} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
    await update.message.reply_text(preview, reply_markup=kb)
    return ConversationHandler.END

async def on_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    q = update.callback_query
    await q.answer()

    if q.data == BROADCAST_PREVIEW_CB_NO:
        await q.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        return

    text = context.user_data.get("broadcast_text", "")
    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    user_ids = list(bloggers.keys())

    ok, fail = 0, 0
    failed_ids: List[str] = []
    app = context.application
    for uid in user_ids:
        try:
            await app.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
            failed_ids.append(uid)

    report = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {ok}\n–û—à–∏–±–æ–∫: {fail}"
    if failed_ids:
        report += "\n\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(failed_ids[:100])
        if len(failed_ids) > 100:
            report += f"\n...–∏ –µ—â—ë {len(failed_ids)-100}"

    try:
        await q.edit_message_text(report, reply_markup=None)
    except Exception:
        await app.bot.send_message(ADMIN_ID, report)

async def admin_save_draft_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫.")
    return ADMIN_WAITING_DRAFT_TEXT

async def admin_save_draft_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return ConversationHandler.END
    t = (update.message.text or "").strip()
    if not t:
        await update.message.reply_text("–ü—É—Å—Ç–æ. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    data = ensure_data_schema()
    drafts = data.get("drafts", [])
    drafts.insert(0, {"text": t, "ts": datetime.now().isoformat()})
    data["drafts"] = drafts[:50]
    save_data(data)
    await update.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    return ConversationHandler.END

async def admin_list_drafts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    data = ensure_data_schema()
    drafts = data.get("drafts", [])[:5]
    if not drafts:
        await update.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ—Ç."); return
    lines = ["üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏:"]
    for i, d in enumerate(drafts, 1):
        preview = d["text"][:120].replace("\n", " ")
        lines.append(f"{i}) {preview} ‚Ä¶  ({d['ts']})")
    await update.message.reply_text("\n".join(lines))

async def admin_referrals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    data = ensure_data_schema()
    refs = data.get("referrals", {})
    if not refs:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."); return
    items = sorted(refs.items(), key=lambda kv: len(kv[1]), reverse=True)[:20]
    lines = ["üë• –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:"]
    for ref_id, lst in items:
        lines.append(f"‚Ä¢ {ref_id}: {len(lst)} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö")
    await update.message.reply_text("\n".join(lines))

async def admin_unpaid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    data = ensure_data_schema()
    payments = data.get("payments", {})
    bloggers = data.get("bloggers", {})
    pending = [(pid, p) for pid, p in payments.items() if p.get("status") in ("pending","under_review")]
    if not pending:
        await update.message.reply_text("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫."); return
    lines = ["üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:"]
    for pid, p in pending[:50]:
        uid = p.get("user_id", "")
        uname = bloggers.get(uid, {}).get("username", "")
        lines.append(f"‚Ä¢ #{pid} ‚Äî {uname} (id:{uid}) ‚Äî {p.get('status')}")
    await update.message.reply_text("\n".join(lines))

def try_parse_date(s: str) -> Optional[datetime]:
    for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
        try:
            return datetime.strptime(s, fmt)
        except Exception:
            pass
    return None

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /stats 01.08.2025-11.08.2025"); return
    rng = "".join(context.args)
    if "-" not in rng:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å: 01.08.2025-11.08.2025"); return
    a, b = rng.split("-", 1)
    dt1, dt2 = try_parse_date(a.strip()), try_parse_date(b.strip())
    if not dt1 or not dt2:
        await update.message.reply_text("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä—ã: 01.08.2025-11.08.2025 –∏–ª–∏ 2025-08-01-2025-08-11"); return
    if dt2 < dt1:
        dt1, dt2 = dt2, dt1

    data = ensure_data_schema()
    bloggers = data.get("bloggers", {})
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    def in_range(ts: str) -> bool:
        try:
            dt = datetime.fromisoformat(ts)
            return dt1 <= dt <= dt2
        except Exception:
            return False

    filled = sum(1 for u in bloggers.values() if in_range(u.get("consent_ts", datetime.now().isoformat())))
    got_tz = sum(1 for o in orders.values() if in_range(o.get("tz_assigned_at", datetime.now().isoformat())))
    done = sum(1 for o in orders.values() if o.get("status") == "links_received" and in_range(o.get("tz_assigned_at", datetime.now().isoformat())))
    req_pay = sum(1 for p in payments.values() if in_range(p.get("timestamp", datetime.now().isoformat())))
    paid = sum(1 for p in payments.values() if p.get("status") == "paid" and in_range(p.get("timestamp", datetime.now().isoformat())))

    text = (
        f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {dt1.date()} ‚Äî {dt2.date()}:\n"
        f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É: {filled}\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –¢–ó: {got_tz}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª–∏ –¢–ó: {done}\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –æ–ø–ª–∞—Ç—É: {req_pay}\n"
        f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {paid}\n"
    )
    await update.message.reply_text(text)

# ----- –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º -----
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ: @billyinemalo1", reply_markup=menu_for(uid))

# ----- –†–æ—É—Ç–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º -----
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = _norm_uid(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –ê–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    if is_mod(uid):
        if text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é":
            return await cmd_admin(update, context)
        if text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel":
            return await export_to_excel(update, context)
        if text == "üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
            return await admin_status_start(update, context)
        if text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":
            return await admin_broadcast_ask_text(update, context)
        if text == "üìà –°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤":
            return await admin_summary(update, context)
        if text == "üßæ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
            return await admin_unpaid(update, context)
        if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫":
            return await admin_save_draft_ask(update, context)
        if text == "üóÇ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏":
            return await admin_list_drafts(update, context)
        if text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã":
            return await admin_referrals(update, context)
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await start(update, context); return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    if text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await restart(update, context)
    if text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return await ask_username(update, context)
    if text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó":
        return await send_task(update, context)
    if text == "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
        return await task_done(update, context)
    if text == "‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞":
        return await decline(update, context)
    if text == "üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)":
        await start(update, context); return
    if text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É":
        return await ask_payment(update, context)
    if text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        return await contact(update, context)

# ----- –≠–∫—Å–ø–æ—Ä—Ç (–æ–±—â–∏–π) -----
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mod(update.effective_user.id):
        return
    data = ensure_data_schema()

    bloggers_df = pd.DataFrame.from_dict(data["bloggers"], orient="index")
    bloggers_df.index.name = "user_id"
    bloggers_df.to_excel(os.path.join(DATA_DIR, "bloggers.xlsx"))

    orders_df = pd.DataFrame.from_dict(data["orders"], orient="index")
    orders_df.index.name = "user_id"
    orders_df.to_excel(os.path.join(DATA_DIR, "orders.xlsx"))

    payments_list = []
    for pid, pdata in data["payments"].items():
        row = dict(pdata)
        row["payment_id"] = pid
        payments_list.append(row)
    payments_df = pd.DataFrame(payments_list)
    payments_df.to_excel(os.path.join(DATA_DIR, "payments.xlsx"), index=False)

    # –û—Ç–∫–∞–∑—ã
    declines_rows: List[Dict[str, Any]] = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                declines_rows = json.load(f)
                if not isinstance(declines_rows, list):
                    declines_rows = []
        except Exception:
            declines_rows = []
    (pd.DataFrame(declines_rows) if declines_rows else pd.DataFrame(columns=["user_id", "reason", "timestamp"])) \
        .to_excel(os.path.join(DATA_DIR, "declines.xlsx"), index=False)

    # –ï–¥–∏–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É
    try:
        export_payments_excel()
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å payments_export.xlsx –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞", exc_info=e)

    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: bloggers.xlsx, orders.xlsx, payments.xlsx, declines.xlsx, payments_export.xlsx"
    )

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            uid = _norm_uid(update.effective_user.id)
            await update.effective_message.reply_text(
                "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª –∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üôè",
                reply_markup=menu_for(uid)
            )
    except Exception:
        pass

# ---------- –ê–í–¢–û-–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ----------
async def job_scan_reminders(context: ContextTypes.DEFAULT_TYPE):
    data = ensure_data_schema()
    orders = data.get("orders", {})
    payments = data.get("payments", {})

    today = datetime.now().date()

    for uid, o in list(orders.items()):
        if o.get("status") == "assigned":
            deadline = o.get("deadline")
            if deadline:
                try:
                    d = datetime.strptime(deadline, "%Y-%m-%d").date()
                except Exception:
                    d = today
                if today >= d and not o.get("reminder_sent"):
                    try:
                        await context.application.bot.send_message(
                            uid,
                            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –≤—ã–∫—É–ø–∞ –ø–æ –¢–ó –ø–æ–¥–æ—à—ë–ª. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª)."
                        )
                        o["reminder_sent"] = True
                        data["orders"][uid] = o
                        save_data(data)
                    except Exception:
                        pass

    for pid, p in list(payments.items()):
        if p.get("status") == "pending" and not p.get("admin_remind_sent"):
            ts = p.get("timestamp")
            try:
                t0 = datetime.fromisoformat(ts) if ts else datetime.now()
            except Exception:
                t0 = datetime.now()
            if datetime.now() - t0 >= timedelta(days=7):
                uid = p.get("user_id")
                bloggers = data.get("bloggers", {})
                uname = bloggers.get(uid, {}).get("username", "")
                try:
                    await context.application.bot.send_message(
                        ADMIN_ID,
                        f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ #{pid}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uname} (id:{uid})"
                    )
                    p["admin_remind_sent"] = True
                    data["payments"][pid] = p
                    save_data(data)
                except Exception:
                    pass

# ---------- post_init ----------
async def _post_init(app):
    me = await app.bot.get_me()
    logging.info(f"BOT ONLINE: @{me.username} (id={me.id})")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    start_health_server()
    ensure_data_schema()

    app = ApplicationBuilder().token(BOT_TOKEN).post_init(_post_init).build()
    app.add_error_handler(on_error)

    # –ê–Ω–∫–µ—Ç–∞
    form_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$"), ask_username)],
        states={
            ASK_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_username)],
            ASK_SUBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_subs)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_platforms)],
            ASK_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_theme)],
            ASK_STATS: [MessageHandler(filters.PHOTO, save_stats)],
        },
        fallbacks=[],
    )

    # –û–ø–ª–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É$"), ask_payment)],
        states={
            WAITING_REVIEW_PHOTO: [MessageHandler(filters.PHOTO, save_review_photo)],
            WAITING_BARCODE_PHOTO: [MessageHandler(filters.PHOTO, save_barcode_photo)],
            WAITING_OZON_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_ozon_order)],
            WAITING_WB_RECEIPT: [MessageHandler(filters.PHOTO, save_wb_receipt)],
            WAITING_PAYMENT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_payment_text)],
        },
        fallbacks=[],
    )

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∏)
    done_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞$"), task_done)],
        states={WAITING_LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_links)]},
        fallbacks=[],
    )

    # –û—Ç–∫–∞–∑
    decline_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞$"), decline)],
        states={WAITING_DECLINE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_decline_reason)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Å—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    admin_status_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é$"), admin_status_start)],
        states={ADMIN_WAITING_STATUS_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_status_wait_uid)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏
    admin_receipt_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.PHOTO & filters.User(user_id=int(_norm_uid(ADMIN_ID))), admin_wait_receipt)],
        states={ADMIN_WAITING_RECEIPT: [MessageHandler(filters.PHOTO, admin_wait_receipt)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    admin_broadcast_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üì£ –†–∞—Å—Å—ã–ª–∫–∞$"), admin_broadcast_ask_text)],
        states={ADMIN_WAITING_BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_text)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    admin_draft_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫$"), admin_save_draft_ask)],
        states={ADMIN_WAITING_DRAFT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_draft_text)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
    admin_segcast_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_segcast_choose, pattern=r"^segcast:")],
        states={ADMIN_WAITING_SEGCAST_TEXT: [MessageHandler(filters.TEXT & filters.User(user_id=int(_norm_uid(ADMIN_ID))), admin_segment_broadcast_text)]},
        fallbacks=[],
    )

    # Callback‚Äô–∏
    app.add_handler(CallbackQueryHandler(on_admin_pay_done_callback, pattern=rf"^{CB_PAY_DONE}"))
    app.add_handler(CallbackQueryHandler(on_admin_support_callback, pattern=rf"^{CB_SUPPORT}"))
    app.add_handler(CallbackQueryHandler(on_broadcast_confirm, pattern=r"^broadcast:(yes|no)$"))
    app.add_handler(CallbackQueryHandler(on_segexport, pattern=r"^segexport:"))
    app.add_handler(CallbackQueryHandler(on_segment_broadcast_confirm, pattern=r"^segconfirm:(yes|no)$"))

    # –ü—Ä–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã
    reconsider_handler = MessageHandler(filters.TEXT & filters.Regex(r"^üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª\(-–∞\)$"), start)
    restart_handler = MessageHandler(filters.TEXT & filters.Regex(r"^üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)

    app.add_handler(CommandHandler("whoami", cmd_whoami))
    app.add_handler(CommandHandler("admin", cmd_admin))
    app.add_handler(CommandHandler("find", cmd_find))
    app.add_handler(CommandHandler("findid", cmd_findid))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    app.add_handler(form_handler)
    app.add_handler(payment_handler)
    app.add_handler(done_handler)
    app.add_handler(decline_handler)
    app.add_handler(admin_status_handler)
    app.add_handler(admin_receipt_handler)
    app.add_handler(admin_broadcast_handler)
    app.add_handler(admin_draft_handler)
    app.add_handler(admin_segcast_conv)
    app.add_handler(reconsider_handler)
    app.add_handler(restart_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–∫–∞–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—ã–π —á–∞—Å)
    app.job_queue.run_repeating(job_scan_reminders, interval=3600, first=60)

    app.run_polling(drop_pending_updates=True)

