import os
import sys
import json
import uuid
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# ---------- –õ–û–ì–ò –ò –í–ï–†–°–ò–ò ----------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–£–¢–ò ----------
(
    ASK_USERNAME,
    ASK_SUBS,
    ASK_PLATFORMS,
    ASK_THEME,
    ASK_STATS,
    WAITING_ORDER_PHOTO,
    WAITING_BARCODE_PHOTO,
    WAITING_PAYMENT_TEXT,
    WAITING_LINKS,
    WAITING_DECLINE_REASON,
    ADMIN_WAITING_STATUS_USER,
    ADMIN_WAITING_RECEIPT,
) = range(12)

DATA_DIR = "data"
DATA_FILE = os.path.join(DATA_DIR, "data.json")
DECLINES_FILE = os.path.join(DATA_DIR, "declines.json")
ADMIN_ID = "1080067724"

# –¢–æ–ª—å–∫–æ —ç—Ç–∏ –ø–ª–æ—â–∞–¥–∫–∏
PLATFORMS = ["Wildberries", "Ozon"]

# ---------- –ú–ï–ù–Æ ----------
def with_admin(menu: ReplyKeyboardMarkup, uid: str) -> ReplyKeyboardMarkup:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)
    if uid == ADMIN_ID:
        rows = [list(map(lambda b: KeyboardButton(b.text), row)) for row in menu.keyboard]
        rows.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
        return ReplyKeyboardMarkup(rows, resize_keyboard=True)
    return menu

menu_start_base = ReplyKeyboardMarkup([
    [KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
    [KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
    [KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
    [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

menu_task_phase_base = ReplyKeyboardMarkup([
    [KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"), KeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
    [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

menu_after_links_base = ReplyKeyboardMarkup([
    [KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
    [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

menu_after_decline_base = ReplyKeyboardMarkup([
    [KeyboardButton("üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
    [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

menu_admin = ReplyKeyboardMarkup([
    [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"), KeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
], resize_keyboard=True)

def menu_start(uid: str): return with_admin(menu_start_base, uid)
def menu_task_phase(uid: str): return with_admin(menu_task_phase_base, uid)
def menu_after_links(uid: str): return with_admin(menu_after_links_base, uid)
def menu_after_decline(uid: str): return with_admin(menu_after_decline_base, uid)

# ---------- –ü–û–î–ì–û–¢–û–í–ö–ê –•–†–ê–ù–ò–õ–ò–©–ê ----------
os.makedirs(DATA_DIR, exist_ok=True)
DEFAULT_DATA = {"bloggers": {}, "orders": {}, "payments": {}}

def load_data():
    if not os.path.exists(DATA_FILE):
        save_data(DEFAULT_DATA.copy())
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: dict):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_data_schema() -> dict:
    try:
        data = load_data()
    except Exception:
        data = {}
    changed = False
    for k in DEFAULT_DATA:
        if k not in data or not isinstance(data[k], dict):
            data[k] = {}
            changed = True
    if changed:
        save_data(data)
    return data

def append_decline(user_id: str, reason: str):
    items = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                items = json.load(f)
                if not isinstance(items, list):
                    items = []
        except Exception:
            items = []
    items.append({"user_id": user_id, "reason": reason, "timestamp": datetime.now().isoformat()})
    with open(DECLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(items, f, ensure_ascii=False, indent=2)

# ---------- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –°–¶–ï–ù–ê–†–ò–Ø ----------
def user_filled_form(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["bloggers"]

def user_has_order(user_id: str) -> bool:
    data = ensure_data_schema()
    return user_id in data["orders"]

def order_status(user_id: str) -> str | None:
    data = ensure_data_schema()
    return data["orders"].get(user_id, {}).get("status")

def set_order_links_received(user_id: str, links: list[str]):
    data = ensure_data_schema()
    o = data["orders"].setdefault(user_id, {"platform": None, "order_date": None, "deadline": None, "status": "assigned", "links": []})
    o["links"] = o.get("links", []) + links
    o["status"] = "links_received"
    save_data(data)

def reset_user_flow(context: ContextTypes.DEFAULT_TYPE, user_id: str):
    context.user_data.clear()

def format_user_status(user_id: str, data: dict) -> str:
    u = data["bloggers"].get(user_id, {})
    o = data["orders"].get(user_id, {})
    status = o.get("status", "‚Äî")
    links = o.get("links", [])
    uname = u.get("username") or "‚Äî"
    subs = u.get("subs") or "‚Äî"
    platform = o.get("platform") or "‚Äî"
    order_date = o.get("order_date") or "‚Äî"
    deadline = o.get("deadline") or "‚Äî"
    lines = [
        f"üë§ user_id: {user_id}",
        f"‚Ä¢ –ù–∏–∫/–∫–∞–Ω–∞–ª: {uname}",
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subs}",
        f"‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}",
        f"‚Ä¢ –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {order_date}",
        f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞: {deadline}",
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}",
    ]
    if links:
        lines.append("‚Ä¢ –°—Å—ã–ª–∫–∏:")
        for i, l in enumerate(links, 1):
            lines.append(f"   {i}. {l}")
    return "\n".join(lines)

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å –≤–∞–º–∏ üéâ\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ¬´üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É¬ª.\n"
        "2) –ó–∞—Ç–µ–º ¬´üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.\n"
        "3) –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
        "4) –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ ¬´üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=menu_start(uid)
    )

async def launch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_user_flow(context, str(update.effective_user.id))
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ üëá", reply_markup=menu_start(str(update.effective_user.id)))

# –ê–Ω–∫–µ—Ç–∞
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = update.message.text
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –≤—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = update.message.text
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7‚Äì14 –¥–Ω–µ–π")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏.")
        return ASK_STATS

    photo = update.message.photo[-1]
    context.user_data["reach_screenshot"] = photo.file_id

    data = ensure_data_schema()
    user_id = str(update.effective_user.id)
    data["bloggers"][user_id] = dict(context.user_data)
    save_data(data)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¢–ó –∫–Ω–æ–ø–∫–æ–π ¬´üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.",
        reply_markup=menu_start(user_id)
    )
    return ConversationHandler.END

# –¢–ó
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not user_filled_form(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: ¬´üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É¬ª.", reply_markup=menu_start(user_id))
        return ConversationHandler.END

    data = ensure_data_schema()
    orders = data["orders"]

    if user_id in orders:
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¢–ó. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.",
            reply_markup=menu_task_phase(user_id)
        )
        return ConversationHandler.END

    # –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
    counts = {p: sum(1 for x in orders.values() if x.get("platform") == p) for p in PLATFORMS}
    platform = min(counts, key=counts.get) if counts else PLATFORMS[0]

    # –¥–∞—Ç—ã: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ = –∑–∞–≤—Ç—Ä–∞; –¥–µ–¥–ª–∞–π–Ω = +3 –¥–Ω—è
    today = datetime.now().date()
    order_date = (today + timedelta(days=1)).strftime("%Y-%m-%d")
    deadline = (today + timedelta(days=4)).strftime("%Y-%m-%d")  # 3-4 –¥–Ω—è –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ

    orders[user_id] = {
        "platform": platform,
        "order_date": order_date,
        "deadline": deadline,
        "status": "assigned",
        "links": []
    }
    save_data(data)

    await update.message.reply_text(
        f"–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{platform}*\n"
        f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: *{order_date}*\n"
        f"–î–µ–¥–ª–∞–π–Ω –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: *–¥–æ {deadline}*\n\n"
        f"–í —Ä–æ–ª–∏–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:\n"
        f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –±—Ä–µ–Ω–¥ **–õ–∞—Å –ò–≥—Ä–∞—Å**\n\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
        f"–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî ¬´‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞¬ª.",
        parse_mode="Markdown",
        reply_markup=menu_task_phase(user_id)
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫–∏
async def task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not user_has_order(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó: ¬´üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó¬ª.", reply_markup=menu_start(user_id))
        return ConversationHandler.END

    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö) –Ω–∞ —Ä–æ–ª–∏–∫(–∏).")
    return WAITING_LINKS

async def save_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ URL(—ã).")
        return WAITING_LINKS

    parts = [p.strip() for p in text.replace("\n", " ").split(",") if p.strip()]
    links = [p for p in parts if p.startswith(("http://", "https://"))]
    if not links and (text.startswith("http://") or text.startswith("https://")):
        links = [text]
    if not links:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return WAITING_LINKS

    set_order_links_received(user_id, links)

    await update.message.reply_text(
        "–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É: ¬´üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É¬ª.",
        reply_markup=menu_after_links(user_id)
    )
    return ConversationHandler.END

# –û—Ç–∫–∞–∑ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
async def decline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not user_has_order(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¢–ó. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¢–ó.", reply_markup=menu_start(user_id))
        return ConversationHandler.END

    await update.message.reply_text(
        "–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòî\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
        reply_markup=menu_after_decline(user_id)
    )
    return WAITING_DECLINE_REASON

async def save_decline_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    reason = (update.message.text or "").strip() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    append_decline(user_id, reason)
    data = ensure_data_schema()
    if user_id in data["orders"]:
        data["orders"][user_id]["status"] = "declined"
        save_data(data)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º –≤–∞—à—É –ø—Ä–∏—á–∏–Ω—É.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)¬ª.",
        reply_markup=menu_after_decline(user_id)
    )
    return ConversationHandler.END

# ¬´–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)¬ª
async def reconsider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# –û–ø–ª–∞—Ç–∞ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not user_filled_form(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.", reply_markup=menu_start(user_id))
        return ConversationHandler.END
    if not user_has_order(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¢–ó.", reply_markup=menu_start(user_id))
        return ConversationHandler.END
    if order_status(user_id) != "links_received":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (¬´‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞¬ª).", reply_markup=menu_task_phase(user_id))
        return ConversationHandler.END

    await update.message.reply_text("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞:", reply_markup=menu_after_links(user_id))
    return WAITING_ORDER_PHOTO

async def save_order_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞.")
        return WAITING_ORDER_PHOTO
    photo = update.message.photo[-1]
    context.user_data["order_photo"] = photo.file_id
    await update.message.reply_text("2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ:")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.")
        return WAITING_BARCODE_PHOTO
    photo = update.message.photo[-1]
    context.user_data["barcode_photo"] = photo.file_id
    await update.message.reply_text("3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–º:")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    data = ensure_data_schema()
    payments = data["payments"]
    order = data["orders"].get(user_id, {})
    links = order.get("links", [])

    payment_id = str(uuid.uuid4())
    payments[payment_id] = {
        "user_id": user_id,
        "order_photo": context.user_data.get("order_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "text": text,
        "links": links,
        "timestamp": datetime.now().isoformat(),
        "status": "pending"
    }
    save_data(data)

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞. –ù–æ–º–µ—Ä: {payment_id}. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
        reply_markup=menu_after_links(user_id)
    )

    # ---- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ----
    app = context.application
    media = []
    if context.user_data.get("order_photo"):
        media.append(InputMediaPhoto(media=context.user_data["order_photo"], caption=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É #{payment_id}"))
    if context.user_data.get("barcode_photo"):
        # –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        media.append(InputMediaPhoto(media=context.user_data["barcode_photo"]))
    if media:
        try:
            await app.bot.send_media_group(ADMIN_ID, media=media)
        except Exception as e:
            logging.exception("send_media_group failed", exc_info=e)

    links_text = "\n".join(f"- {u}" for u in links) if links else "‚Äî"
    admin_text = (
        f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É #{payment_id}\n"
        f"üë§ user_id: {user_id}\n"
        f"üîó –°—Å—ã–ª–∫–∏:\n{links_text}\n\n"
        f"üí≥ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:\n{text}\n\n"
        f"–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫."
    )
    confirm_btn = ReplyKeyboardMarkup([[KeyboardButton(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞: {payment_id}")],
                                       [KeyboardButton("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")]], resize_keyboard=True)
    try:
        await app.bot.send_message(ADMIN_ID, admin_text, reply_markup=confirm_btn)
    except Exception as e:
        logging.exception("send admin text failed", exc_info=e)

    return ConversationHandler.END

# –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é
    if order_status(uid) == "links_received":
        kb = menu_after_links(uid)
    elif user_has_order(uid):
        kb = menu_task_phase(uid)
    else:
        kb = menu_start(uid)
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @billyinemalo1", reply_markup=kb)

# –†–æ—É—Ç–µ—Ä –ø–æ –∫–Ω–æ–ø–∫–∞–º
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if uid == ADMIN_ID:
        if text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é":
            await update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=menu_admin); return
        if text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel":
            return await export_to_excel(update, context)
        if text == "üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å.")
            return ADMIN_WAITING_STATUS_USER
        if text.startswith("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞:"):
            # –ü–∞—Ä—Å–∏–º payment_id –∏ –∂–¥—ë–º —á–µ–∫
            try:
                payment_id = text.split(":", 1)[1].strip()
            except Exception:
                payment_id = None
            if not payment_id:
                await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
                return ConversationHandler.END
            context.chat_data["confirm_payment"] = {"payment_id": payment_id}
            await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return ADMIN_WAITING_RECEIPT
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await start(update, context); return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await launch(update, context)
    if text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await restart(update, context)
    if text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return await ask_username(update, context)
    if text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó":
        return await send_task(update, context)
    if text == "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞":
        return await task_done(update, context)
    if text == "‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞":
        return await decline(update, context)
    if text == "üîÅ –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(-–∞)":
        return await reconsider(update, context)
    if text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É":
        return await ask_payment(update, context)
    if text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        return await contact(update, context)

# --- –ê–¥–º–∏–Ω: —Å—Ç–∞—Ç—É—Å –ø–æ user_id ---
async def admin_status_wait_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = (update.message.text or "").strip()
    data = ensure_data_schema()
    if uid not in data["bloggers"] and uid not in data["orders"]:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_admin)
        return ConversationHandler.END
    await update.message.reply_text(format_user_status(uid, data), reply_markup=menu_admin)
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω: –ø—Ä–∏—ë–º —á–µ–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def admin_wait_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info = context.chat_data.get("confirm_payment") or {}
    payment_id = info.get("payment_id")
    if not payment_id:
        await update.message.reply_text("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=menu_admin)
        return ConversationHandler.END
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return ADMIN_WAITING_RECEIPT

    photo_id = update.message.photo[-1].file_id

    data = ensure_data_schema()
    pay = data["payments"].get(payment_id)
    if not pay:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu_admin)
        return ConversationHandler.END

    user_id = pay["user_id"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    app = context.application
    try:
        await app.bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ #{payment_id}. –°–ø–∞—Å–∏–±–æ!")
        await app.bot.send_photo(user_id, photo_id, caption="–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", exc_info=e)

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å—ã
    pay["status"] = "paid"
    order = data["orders"].get(user_id, {})
    order["status"] = "completed"
    data["orders"][user_id] = order
    save_data(data)

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –∏ –ø–æ–ª—É—á–∏–ª —á–µ–∫.", reply_markup=menu_admin)
    context.chat_data.pop("confirm_payment", None)
    return ConversationHandler.END

# –≠–∫—Å–ø–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_ID:
        return
    data = ensure_data_schema()

    bloggers_df = pd.DataFrame.from_dict(data["bloggers"], orient="index")
    bloggers_df.index.name = "user_id"
    bloggers_df.to_excel(os.path.join(DATA_DIR, "bloggers.xlsx"))

    orders_df = pd.DataFrame.from_dict(data["orders"], orient="index")
    orders_df.index.name = "user_id"
    orders_df.to_excel(os.path.join(DATA_DIR, "orders.xlsx"))

    payments_list = []
    for pid, pdata in data["payments"].items():
        row = dict(pdata)
        row["payment_id"] = pid
        payments_list.append(row)
    payments_df = pd.DataFrame(payments_list)
    payments_df.to_excel(os.path.join(DATA_DIR, "payments.xlsx"), index=False)

    # –û—Ç–∫–∞–∑—ã
    declines_rows = []
    if os.path.exists(DECLINES_FILE):
        try:
            with open(DECLINES_FILE, "r", encoding="utf-8") as f:
                declines_rows = json.load(f)
                if not isinstance(declines_rows, list):
                    declines_rows = []
        except Exception:
            declines_rows = []
    (pd.DataFrame(declines_rows) if declines_rows else pd.DataFrame(columns=["user_id", "reason", "timestamp"])) \
        .to_excel(os.path.join(DATA_DIR, "declines.xlsx"), index=False)

    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: bloggers.xlsx, orders.xlsx, payments.xlsx, declines.xlsx", reply_markup=menu_admin)

# ---------- HEALTHCHECK ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
        def log_message(self, *_): pass
    port = int(os.environ.get("PORT", 8080))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            uid = str(update.effective_user.id)
            await update.effective_message.reply_text(
                "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª –∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üôè",
                reply_markup=menu_start(uid)
            )
    except Exception:
        pass

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    start_health_server()
    ensure_data_schema()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(on_error)

    # –ê–Ω–∫–µ—Ç–∞
    form_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$"), ask_username)],
        states={
            ASK_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_username)],
            ASK_SUBS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_subs)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_platforms)],
            ASK_THEME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_theme)],
            ASK_STATS: [MessageHandler(filters.PHOTO, save_stats)],
        },
        fallbacks=[],
    )

    # –û–ø–ª–∞—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É$"), ask_payment)],
        states={
            WAITING_ORDER_PHOTO: [MessageHandler(filters.PHOTO, save_order_photo)],
            WAITING_BARCODE_PHOTO: [MessageHandler(filters.PHOTO, save_barcode_photo)],
            WAITING_PAYMENT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_payment_text)],
        },
        fallbacks=[],
    )

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∏)
    done_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞$"), task_done)],
        states={WAITING_LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_links)]},
        fallbacks=[],
    )

    # –û—Ç–∫–∞–∑
    decline_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞$"), decline)],
        states={WAITING_DECLINE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_decline_reason)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: —Å—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    admin_status_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìä –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é$"), lambda u,c: ADMIN_WAITING_STATUS_USER)],
        states={ADMIN_WAITING_STATUS_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_status_wait_uid)]},
        fallbacks=[],
    )

    # –ê–¥–º–∏–Ω: –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ–∫–∞
    admin_receipt_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞:"), handle_text)],
        states={ADMIN_WAITING_RECEIPT: [MessageHandler(filters.PHOTO, admin_wait_receipt)]},
        fallbacks=[],
    )

    # –ü—Ä–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏
    reconsider_handler = MessageHandler(filters.TEXT & filters.Regex("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª\\(-–∞\\)"), reconsider)
    launch_handler = MessageHandler(filters.TEXT & filters.Regex("^üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), launch)
    restart_handler = MessageHandler(filters.TEXT & filters.Regex("^üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞$"), restart)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_to_excel))
    app.add_handler(form_handler)
    app.add_handler(payment_handler)
    app.add_handler(done_handler)
    app.add_handler(decline_handler)
    app.add_handler(admin_status_handler)
    app.add_handler(admin_receipt_handler)
    app.add_handler(reconsider_handler)
    app.add_handler(launch_handler)
    app.add_handler(restart_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling(drop_pending_updates=True)
