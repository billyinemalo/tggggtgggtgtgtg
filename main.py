import os
import sys
import json
import uuid
import logging
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta

from dotenv import load_dotenv
import pandas as pd
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# ---------- –õ–û–ì–ò –ò –í–ï–†–°–ò–ò ----------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

# ---------- ENV ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ ----------
(ASK_USERNAME, ASK_SUBS, ASK_PLATFORMS, ASK_THEME, ASK_STATS,
 WAITING_PAYMENT, WAITING_ORDER_PHOTO, WAITING_BARCODE_PHOTO, WAITING_PAYMENT_TEXT) = range(9)

DATA_DIR = "data"
DATA_FILE = os.path.join(DATA_DIR, "data.json")

PLATFORMS = ["Wildberries", "Ozon", "Sima-Land"]

main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
    [KeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó"), KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
], resize_keyboard=True)

# ---------- –ü–û–î–ì–û–¢–û–í–ö–ê –•–†–ê–ù–ò–õ–ò–©–ê ----------
os.makedirs(DATA_DIR, exist_ok=True)
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"bloggers": {}, "orders": {}, "payments": {}}, f, ensure_ascii=False, indent=2)

def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å –≤–∞–º–∏ üéâ\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=main_menu
    )

# –ê–Ω–∫–µ—Ç–∞
async def ask_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("1. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞:")
    return ASK_USERNAME

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    await update.message.reply_text("2. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?")
    return ASK_SUBS

async def save_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["subs"] = update.message.text
    await update.message.reply_text("3. –ù–∞ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –≤—ã —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ —Ä–µ–∫–ª–∞–º—É?")
    return ASK_PLATFORMS

async def save_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["platforms"] = update.message.text
    await update.message.reply_text("4. –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    return ASK_THEME

async def save_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["theme"] = update.message.text
    await update.message.reply_text("5. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—Ö–≤–∞—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7‚Äì14 –¥–Ω–µ–π")
    return ASK_STATS

async def save_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    context.user_data["reach_screenshot"] = photo.file_id

    data = load_data()
    data["bloggers"][str(update.effective_user.id)] = context.user_data
    save_data(data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    return ConversationHandler.END

# –¢–ó
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    orders = data["orders"]

    if user_id in orders:
        platform = orders[user_id]["platform"]
        order_date = orders[user_id]["order_date"]
    else:
        counts = {p: sum(1 for x in orders.values() if x["platform"] == p) for p in PLATFORMS}
        platform = min(counts, key=counts.get)

        start_dt = datetime(2025, 9, 1)
        total = sum(counts.values())
        week = (total // 333) + 1
        order_date = start_dt + timedelta(weeks=min(2, week))

        orders[user_id] = {
            "platform": platform,
            "order_date": order_date.strftime("%Y-%m-%d")
        }
        save_data(data)

    await update.message.reply_text(
        f"–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{platform}*\n"
        f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: *{orders[user_id]['order_date']}*\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ä–æ–ª–∏–∫. –í —Ä–æ–ª–∏–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:\n\n"
        f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –±—Ä–µ–Ω–¥ **–õ–∞—Å –ò–≥—Ä–∞—Å**\n"
        f"‚Ä¢ –ù–∞–∑–æ–≤–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é **–°–∏–º–∞ –õ–µ–Ω–¥**\n\n"
        f"–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ üé•",
        parse_mode="Markdown"
    )

# –û–ø–ª–∞—Ç–∞
async def ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id not in data["bloggers"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! üìã")
        return ConversationHandler.END
    await update.message.reply_text("1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞:")
    return WAITING_ORDER_PHOTO

async def save_order_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    context.user_data["order_photo"] = photo.file_id
    await update.message.reply_text("2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ:")
    return WAITING_BARCODE_PHOTO

async def save_barcode_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    context.user_data["barcode_photo"] = photo.file_id
    await update.message.reply_text("3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –§–ò–û –¥–µ—Ä–∂–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–º:")
    return WAITING_PAYMENT_TEXT

async def save_payment_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text

    data = load_data()
    payments = data["payments"]

    payment_id = str(uuid.uuid4())

    payments[payment_id] = {
        "user_id": user_id,
        "order_photo": context.user_data.get("order_photo"),
        "barcode_photo": context.user_data.get("barcode_photo"),
        "text": text,
        "timestamp": datetime.now().isoformat()
    }
    save_data(data)

    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞. –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {payment_id}. "
        "–î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
    )

    ADMIN_ID = "1080067724"
    app = context.application
    await app.bot.send_message(ADMIN_ID, f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç {user_id} (–ù–æ–º–µ—Ä: {payment_id})")
    if context.user_data.get("order_photo"):
        await app.bot.send_photo(ADMIN_ID, context.user_data["order_photo"], caption="–°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–∫–∞–∑–∞")
    if context.user_data.get("barcode_photo"):
        await app.bot.send_photo(ADMIN_ID, context.user_data["barcode_photo"], caption="–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏")
    await app.bot.send_message(ADMIN_ID, f"üí≥ {text}")

    return ConversationHandler.END

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @billyinemalo1")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return await ask_username(update, context)
    elif text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¢–ó":
        return await send_task(update, context)
    elif text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É":
        return await ask_payment(update, context)
    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        return await contact(update, context)

async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != "1080067724":
        return
    data = load_data()

    bloggers_df = pd.DataFrame.from_dict(data["bloggers"], orient="index")
    bloggers_df.index.name = "user_id"
    bloggers_df.to_excel(os.path.join(DATA_DIR, "bloggers.xlsx"))

    orders_df = pd.DataFrame.from_dict(data["orders"], orient="index")
    orders_df.index.name = "user_id"
    orders_df.to_excel(os.path.join(DATA_DIR, "orders.xlsx"))

    payments_list = []
    for payment_id, payment_data in data["payments"].items():
        pdict = dict(payment_data)
        pdict["payment_id"] = payment_id
        payments_list.append(pdict)
    payments_df = pd.DataFrame(payments_list)
    payments_df.to_excel(os.path.join(DATA_DIR, "payments.xlsx"), index=False)

    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel —Ñ–∞–π–ª—ã: bloggers.xlsx, orders.xlsx, payments.xlsx"
    )

# ---------- HEALTHCHECK (–¥–ª—è Render) ----------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"ok")
        def log_message(self, *_):
            # –ø—Ä–∏–≥–ª—É—à–∞–µ–º –ª–æ–≥–∏ http-—Å–µ—Ä–≤–µ—Ä–∞
            pass

    port = int(os.environ.get("PORT", 8080))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    # 1) healthcheck –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ Web Service
    start_health_server()

    # 2) Telegram bot (PTB 21.x)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ê–Ω–∫–µ—Ç–∞
    form_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"), ask_username)],
        states={
            ASK_USERNAME: [MessageHandler(filters.TEXT, save_username)],
            ASK_SUBS: [MessageHandler(filters.TEXT, save_subs)],
            ASK_PLATFORMS: [MessageHandler(filters.TEXT, save_platforms)],
            ASK_THEME: [MessageHandler(filters.TEXT, save_theme)],
            ASK_STATS: [MessageHandler(filters.PHOTO, save_stats)],
        },
        fallbacks=[],
    )

    # –û–ø–ª–∞—Ç–∞
    payment_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É"), ask_payment)],
        states={
            WAITING_ORDER_PHOTO: [MessageHandler(filters.PHOTO, save_order_photo)],
            WAITING_BARCODE_PHOTO: [MessageHandler(filters.PHOTO, save_barcode_photo)],
            WAITING_PAYMENT_TEXT: [MessageHandler(filters.TEXT, save_payment_text)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_to_excel))
    app.add_handler(form_handler)
    app.add_handler(payment_handler)
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    # –û–¥–∏–Ω –≤—ã–∑–æ–≤ ‚Äî –±–ª–æ–∫–∏—Ä—É—é—â–∏–π polling –¥–ª—è v21.x
    app.run_polling(drop_pending_updates=True)
